// Code generated by Prisma Client Rust. DO NOT EDIT

pub static DATAMODEL_STR: &'static str =
    include_str!("/home/remi/apps/ArkIndexer/prisma/schema.prisma");
static DATABASE_STR: &'static str = "sqlite";
pub async fn new_client() -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder().build().await
}
pub async fn new_client_with_url(
    url: &str,
) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
    PrismaClient::_builder()
        .with_url(url.to_string())
        .build()
        .await
}
pub mod token {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Token";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Id, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod address {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "address";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetAddress(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Address(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Address(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Address(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Address,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Address(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Address(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod token_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "token_id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTokenId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TokenId(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TokenId(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::TokenId(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            TokenId,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TokenId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TokenId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod padded_token_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "padded_token_id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPaddedTokenId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::PaddedTokenId(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::PaddedTokenId(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::PaddedTokenId(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            PaddedTokenId,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::PaddedTokenId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::PaddedTokenId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod owner {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "owner";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetOwner(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Owner(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Owner(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Owner(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Owner,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Owner(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Owner(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod mint_address {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mint_address";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMintAddress(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::MintAddress(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::MintAddress(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::MintAddress(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            MintAddress,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::MintAddress(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::MintAddress(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod mint_timestamp {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mint_timestamp";
        pub struct Set(pub Option<i32>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMintTimestamp(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::MintTimestamp(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<i32>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::MintTimestamp(direction)
        }
        pub fn equals(value: Option<i32>) -> WhereParam {
            WhereParam::MintTimestamp(_prisma::read_filters::IntNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntNullableFilter,
            MintTimestamp,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: Option<i32>) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementMintTimestamp(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementMintTimestamp(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyMintTimestamp(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideMintTimestamp(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::MintTimestamp(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::MintTimestamp(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod mint_transaction_hash {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mint_transaction_hash";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMintTransactionHash(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::MintTransactionHash(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::MintTransactionHash(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::MintTransactionHash(_prisma::read_filters::StringNullableFilter::Equals(
                value,
            ))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            MintTransactionHash,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::MintTransactionHash(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::MintTransactionHash(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod mint_block_number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "mint_block_number";
        pub struct Set(pub Option<i32>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetMintBlockNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::MintBlockNumber(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<i32>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::MintBlockNumber(direction)
        }
        pub fn equals(value: Option<i32>) -> WhereParam {
            WhereParam::MintBlockNumber(_prisma::read_filters::IntNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntNullableFilter,
            MintBlockNumber,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: Option<i32>) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementMintBlockNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementMintBlockNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyMintBlockNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideMintBlockNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::MintBlockNumber(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::MintBlockNumber(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexer_version {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexer_version";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexerVersion(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexerVersion(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexerVersion(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::IndexerVersion(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            IndexerVersion,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexerVersion(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexerVersion(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexed_at_block_number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexed_at_block_number";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexedAtBlockNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexedAtBlockNumber(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexedAtBlockNumber(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::IndexedAtBlockNumber(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            IndexedAtBlockNumber,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementIndexedAtBlockNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementIndexedAtBlockNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyIndexedAtBlockNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideIndexedAtBlockNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexedAtBlockNumber(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexedAtBlockNumber(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn address_token_id<T: From<UniqueWhereParam>>(address: String, token_id: String) -> T {
        UniqueWhereParam::AddressTokenIdEquals(address, token_id).into()
    }
    pub fn create(
        address: String,
        token_id: String,
        padded_token_id: String,
        owner: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (String, String, String, String, i32, Vec<SetParam>) {
        (
            address,
            token_id,
            padded_token_id,
            owner,
            indexed_at_block_number,
            _params,
        )
    }
    pub fn create_unchecked(
        address: String,
        token_id: String,
        padded_token_id: String,
        owner: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (String, String, String, String, i32, Vec<SetParam>) {
        (
            address,
            token_id,
            padded_token_id,
            owner,
            indexed_at_block_number,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_token { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: token :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: token :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: token :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: token :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: token :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: token :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , address , token_id , padded_token_id , owner , mint_address , mint_timestamp , mint_transaction_hash , mint_block_number , indexer_version , indexed_at_block_number } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: token :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: token :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: token :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: token :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "address" , "token_id" , "padded_token_id" , "owner" , "mint_address" , "mint_timestamp" , "mint_transaction_hash" , "mint_block_number" , "indexer_version" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: token :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { String } ; (@ field_type ; address) => { String } ; (@ field_type ; token_id) => { String } ; (@ field_type ; padded_token_id) => { String } ; (@ field_type ; owner) => { String } ; (@ field_type ; mint_address) => { Option < String > } ; (@ field_type ; mint_timestamp) => { Option < i32 > } ; (@ field_type ; mint_transaction_hash) => { Option < String > } ; (@ field_type ; mint_block_number) => { Option < i32 > } ; (@ field_type ; indexer_version) => { Option < String > } ; (@ field_type ; indexed_at_block_number) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Token" , available relations are "id, address, token_id, padded_token_id, owner, mint_address, mint_timestamp, mint_transaction_hash, mint_block_number, indexer_version, indexed_at_block_number")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: id :: Select) } ; (@ selection_field_to_selection_param ; address) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: address :: Select) } ; (@ selection_field_to_selection_param ; token_id) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: token_id :: Select) } ; (@ selection_field_to_selection_param ; padded_token_id) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: padded_token_id :: Select) } ; (@ selection_field_to_selection_param ; owner) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: owner :: Select) } ; (@ selection_field_to_selection_param ; mint_address) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: mint_address :: Select) } ; (@ selection_field_to_selection_param ; mint_timestamp) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: mint_timestamp :: Select) } ; (@ selection_field_to_selection_param ; mint_transaction_hash) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: mint_transaction_hash :: Select) } ; (@ selection_field_to_selection_param ; mint_block_number) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: mint_block_number :: Select) } ; (@ selection_field_to_selection_param ; indexer_version) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: indexer_version :: Select) } ; (@ selection_field_to_selection_param ; indexed_at_block_number) => { Into :: < crate :: prisma :: token :: SelectParam > :: into (crate :: prisma :: token :: indexed_at_block_number :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: token :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; address) => { "address" } ; (@ field_serde_name ; token_id) => { "token_id" } ; (@ field_serde_name ; padded_token_id) => { "padded_token_id" } ; (@ field_serde_name ; owner) => { "owner" } ; (@ field_serde_name ; mint_address) => { "mint_address" } ; (@ field_serde_name ; mint_timestamp) => { "mint_timestamp" } ; (@ field_serde_name ; mint_transaction_hash) => { "mint_transaction_hash" } ; (@ field_serde_name ; mint_block_number) => { "mint_block_number" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _select_token as select;
    pub enum SelectParam {
        Id(id::Select),
        Address(address::Select),
        TokenId(token_id::Select),
        PaddedTokenId(padded_token_id::Select),
        Owner(owner::Select),
        MintAddress(mint_address::Select),
        MintTimestamp(mint_timestamp::Select),
        MintTransactionHash(mint_transaction_hash::Select),
        MintBlockNumber(mint_block_number::Select),
        IndexerVersion(indexer_version::Select),
        IndexedAtBlockNumber(indexed_at_block_number::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Address(data) => data.to_selection(),
                Self::TokenId(data) => data.to_selection(),
                Self::PaddedTokenId(data) => data.to_selection(),
                Self::Owner(data) => data.to_selection(),
                Self::MintAddress(data) => data.to_selection(),
                Self::MintTimestamp(data) => data.to_selection(),
                Self::MintTransactionHash(data) => data.to_selection(),
                Self::MintBlockNumber(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_token { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: token :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: token :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: token :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: token :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: token :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: token :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: token :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: token :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : String , pub address : String , pub token_id : String , pub padded_token_id : String , pub owner : String , pub mint_address : Option < String > , pub mint_timestamp : Option < i32 > , pub mint_transaction_hash : Option < String > , pub mint_block_number : Option < i32 > , pub indexer_version : Option < String > , pub indexed_at_block_number : i32 , $ (pub $ field : crate :: prisma :: token :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (address) , stringify ! (token_id) , stringify ! (padded_token_id) , stringify ! (owner) , stringify ! (mint_address) , stringify ! (mint_timestamp) , stringify ! (mint_transaction_hash) , stringify ! (mint_block_number) , stringify ! (indexer_version) , stringify ! (indexed_at_block_number)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: token :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: token :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: token :: address :: NAME , & self . address) ? ; state . serialize_field (crate :: prisma :: token :: token_id :: NAME , & self . token_id) ? ; state . serialize_field (crate :: prisma :: token :: padded_token_id :: NAME , & self . padded_token_id) ? ; state . serialize_field (crate :: prisma :: token :: owner :: NAME , & self . owner) ? ; state . serialize_field (crate :: prisma :: token :: mint_address :: NAME , & self . mint_address) ? ; state . serialize_field (crate :: prisma :: token :: mint_timestamp :: NAME , & self . mint_timestamp) ? ; state . serialize_field (crate :: prisma :: token :: mint_transaction_hash :: NAME , & self . mint_transaction_hash) ? ; state . serialize_field (crate :: prisma :: token :: mint_block_number :: NAME , & self . mint_block_number) ? ; state . serialize_field (crate :: prisma :: token :: indexer_version :: NAME , & self . indexer_version) ? ; state . serialize_field (crate :: prisma :: token :: indexed_at_block_number :: NAME , & self . indexed_at_block_number) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , address , token_id , padded_token_id , owner , mint_address , mint_timestamp , mint_transaction_hash , mint_block_number , indexer_version , indexed_at_block_number } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: token :: $ field :: NAME) , + , crate :: prisma :: token :: id :: NAME , crate :: prisma :: token :: address :: NAME , crate :: prisma :: token :: token_id :: NAME , crate :: prisma :: token :: padded_token_id :: NAME , crate :: prisma :: token :: owner :: NAME , crate :: prisma :: token :: mint_address :: NAME , crate :: prisma :: token :: mint_timestamp :: NAME , crate :: prisma :: token :: mint_transaction_hash :: NAME , crate :: prisma :: token :: mint_block_number :: NAME , crate :: prisma :: token :: indexer_version :: NAME , crate :: prisma :: token :: indexed_at_block_number :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: token :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: token :: id :: NAME => Ok (Field :: id) , crate :: prisma :: token :: address :: NAME => Ok (Field :: address) , crate :: prisma :: token :: token_id :: NAME => Ok (Field :: token_id) , crate :: prisma :: token :: padded_token_id :: NAME => Ok (Field :: padded_token_id) , crate :: prisma :: token :: owner :: NAME => Ok (Field :: owner) , crate :: prisma :: token :: mint_address :: NAME => Ok (Field :: mint_address) , crate :: prisma :: token :: mint_timestamp :: NAME => Ok (Field :: mint_timestamp) , crate :: prisma :: token :: mint_transaction_hash :: NAME => Ok (Field :: mint_transaction_hash) , crate :: prisma :: token :: mint_block_number :: NAME => Ok (Field :: mint_block_number) , crate :: prisma :: token :: indexer_version :: NAME => Ok (Field :: indexer_version) , crate :: prisma :: token :: indexed_at_block_number :: NAME => Ok (Field :: indexed_at_block_number) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut address = None ; let mut token_id = None ; let mut padded_token_id = None ; let mut owner = None ; let mut mint_address = None ; let mut mint_timestamp = None ; let mut mint_transaction_hash = None ; let mut mint_block_number = None ; let mut indexer_version = None ; let mut indexed_at_block_number = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: address => { if address . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: address :: NAME)) ; } address = Some (map . next_value () ?) ; } Field :: token_id => { if token_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: token_id :: NAME)) ; } token_id = Some (map . next_value () ?) ; } Field :: padded_token_id => { if padded_token_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: padded_token_id :: NAME)) ; } padded_token_id = Some (map . next_value () ?) ; } Field :: owner => { if owner . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: owner :: NAME)) ; } owner = Some (map . next_value () ?) ; } Field :: mint_address => { if mint_address . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: mint_address :: NAME)) ; } mint_address = Some (map . next_value () ?) ; } Field :: mint_timestamp => { if mint_timestamp . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: mint_timestamp :: NAME)) ; } mint_timestamp = Some (map . next_value () ?) ; } Field :: mint_transaction_hash => { if mint_transaction_hash . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: mint_transaction_hash :: NAME)) ; } mint_transaction_hash = Some (map . next_value () ?) ; } Field :: mint_block_number => { if mint_block_number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: mint_block_number :: NAME)) ; } mint_block_number = Some (map . next_value () ?) ; } Field :: indexer_version => { if indexer_version . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: indexer_version :: NAME)) ; } indexer_version = Some (map . next_value () ?) ; } Field :: indexed_at_block_number => { if indexed_at_block_number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: indexed_at_block_number :: NAME)) ; } indexed_at_block_number = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: token :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: id :: NAME)) ? ; let address = address . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: address :: NAME)) ? ; let token_id = token_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: token_id :: NAME)) ? ; let padded_token_id = padded_token_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: padded_token_id :: NAME)) ? ; let owner = owner . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: owner :: NAME)) ? ; let mint_address = mint_address . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: mint_address :: NAME)) ? ; let mint_timestamp = mint_timestamp . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: mint_timestamp :: NAME)) ? ; let mint_transaction_hash = mint_transaction_hash . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: mint_transaction_hash :: NAME)) ? ; let mint_block_number = mint_block_number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: mint_block_number :: NAME)) ? ; let indexer_version = indexer_version . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: indexer_version :: NAME)) ? ; let indexed_at_block_number = indexed_at_block_number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: token :: indexed_at_block_number :: NAME)) ? ; Ok (Data { id , address , token_id , padded_token_id , owner , mint_address , mint_timestamp , mint_transaction_hash , mint_block_number , indexer_version , indexed_at_block_number , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "address" , "token_id" , "padded_token_id" , "owner" , "mint_address" , "mint_timestamp" , "mint_transaction_hash" , "mint_block_number" , "indexer_version" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: token :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Token" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: token :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; address) => { "address" } ; (@ field_serde_name ; token_id) => { "token_id" } ; (@ field_serde_name ; padded_token_id) => { "padded_token_id" } ; (@ field_serde_name ; owner) => { "owner" } ; (@ field_serde_name ; mint_address) => { "mint_address" } ; (@ field_serde_name ; mint_timestamp) => { "mint_timestamp" } ; (@ field_serde_name ; mint_transaction_hash) => { "mint_transaction_hash" } ; (@ field_serde_name ; mint_block_number) => { "mint_block_number" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _include_token as include;
    pub enum IncludeParam {
        Id(id::Include),
        Address(address::Include),
        TokenId(token_id::Include),
        PaddedTokenId(padded_token_id::Include),
        Owner(owner::Include),
        MintAddress(mint_address::Include),
        MintTimestamp(mint_timestamp::Include),
        MintTransactionHash(mint_transaction_hash::Include),
        MintBlockNumber(mint_block_number::Include),
        IndexerVersion(indexer_version::Include),
        IndexedAtBlockNumber(indexed_at_block_number::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Address(data) => data.to_selection(),
                Self::TokenId(data) => data.to_selection(),
                Self::PaddedTokenId(data) => data.to_selection(),
                Self::Owner(data) => data.to_selection(),
                Self::MintAddress(data) => data.to_selection(),
                Self::MintTimestamp(data) => data.to_selection(),
                Self::MintTransactionHash(data) => data.to_selection(),
                Self::MintBlockNumber(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_token { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: token struct $ struct_name { # [serde (rename = "id")] pub id : String , # [serde (rename = "address")] pub address : String , # [serde (rename = "token_id")] pub token_id : String , # [serde (rename = "padded_token_id")] pub padded_token_id : String , # [serde (rename = "owner")] pub owner : String , # [serde (rename = "mint_address")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub mint_address : Option < String > , # [serde (rename = "mint_timestamp")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub mint_timestamp : Option < i32 > , # [serde (rename = "mint_transaction_hash")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub mint_transaction_hash : Option < String > , # [serde (rename = "mint_block_number")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub mint_block_number : Option < i32 > , # [serde (rename = "indexer_version")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub indexer_version : Option < String > , # [serde (rename = "indexed_at_block_number")] pub indexed_at_block_number : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_token as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "address")]
        pub address: String,
        #[serde(rename = "token_id")]
        pub token_id: String,
        #[serde(rename = "padded_token_id")]
        pub padded_token_id: String,
        #[serde(rename = "owner")]
        pub owner: String,
        #[serde(rename = "mint_address")]
        pub mint_address: Option<String>,
        #[serde(rename = "mint_timestamp")]
        pub mint_timestamp: Option<i32>,
        #[serde(rename = "mint_transaction_hash")]
        pub mint_transaction_hash: Option<String>,
        #[serde(rename = "mint_block_number")]
        pub mint_block_number: Option<i32>,
        #[serde(rename = "indexer_version")]
        pub indexer_version: Option<String>,
        #[serde(rename = "indexed_at_block_number")]
        pub indexed_at_block_number: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        SetAddress(String),
        SetTokenId(String),
        SetPaddedTokenId(String),
        SetOwner(String),
        SetMintAddress(Option<String>),
        SetMintTimestamp(Option<i32>),
        IncrementMintTimestamp(i32),
        DecrementMintTimestamp(i32),
        MultiplyMintTimestamp(i32),
        DivideMintTimestamp(i32),
        SetMintTransactionHash(Option<String>),
        SetMintBlockNumber(Option<i32>),
        IncrementMintBlockNumber(i32),
        DecrementMintBlockNumber(i32),
        MultiplyMintBlockNumber(i32),
        DivideMintBlockNumber(i32),
        SetIndexerVersion(Option<String>),
        SetIndexedAtBlockNumber(i32),
        IncrementIndexedAtBlockNumber(i32),
        DecrementIndexedAtBlockNumber(i32),
        MultiplyIndexedAtBlockNumber(i32),
        DivideIndexedAtBlockNumber(i32),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetAddress(value) => (
                    address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTokenId(value) => (
                    token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetPaddedTokenId(value) => (
                    padded_token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetOwner(value) => (
                    owner::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetMintAddress(value) => (
                    mint_address::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetMintTimestamp(value) => (
                    mint_timestamp::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::IncrementMintTimestamp(value) => (
                    mint_timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementMintTimestamp(value) => (
                    mint_timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyMintTimestamp(value) => (
                    mint_timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideMintTimestamp(value) => (
                    mint_timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetMintTransactionHash(value) => (
                    mint_transaction_hash::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetMintBlockNumber(value) => (
                    mint_block_number::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::IncrementMintBlockNumber(value) => (
                    mint_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementMintBlockNumber(value) => (
                    mint_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyMintBlockNumber(value) => (
                    mint_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideMintBlockNumber(value) => (
                    mint_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetIndexerVersion(value) => (
                    indexer_version::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(String),
        Address(String),
        TokenId(String),
        PaddedTokenId(String),
        Owner(String),
        MintAddress(Option<String>),
        MintTimestamp(Option<i32>),
        MintTransactionHash(Option<String>),
        MintBlockNumber(Option<i32>),
        IndexerVersion(Option<String>),
        IndexedAtBlockNumber(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Address(value) => Self::SetAddress(value),
                UncheckedSetParam::TokenId(value) => Self::SetTokenId(value),
                UncheckedSetParam::PaddedTokenId(value) => Self::SetPaddedTokenId(value),
                UncheckedSetParam::Owner(value) => Self::SetOwner(value),
                UncheckedSetParam::MintAddress(value) => Self::SetMintAddress(value),
                UncheckedSetParam::MintTimestamp(value) => Self::SetMintTimestamp(value),
                UncheckedSetParam::MintTransactionHash(value) => {
                    Self::SetMintTransactionHash(value)
                }
                UncheckedSetParam::MintBlockNumber(value) => Self::SetMintBlockNumber(value),
                UncheckedSetParam::IndexerVersion(value) => Self::SetIndexerVersion(value),
                UncheckedSetParam::IndexedAtBlockNumber(value) => {
                    Self::SetIndexedAtBlockNumber(value)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Address(::prisma_client_rust::Direction),
        TokenId(::prisma_client_rust::Direction),
        PaddedTokenId(::prisma_client_rust::Direction),
        Owner(::prisma_client_rust::Direction),
        MintAddress(::prisma_client_rust::Direction),
        MintTimestamp(::prisma_client_rust::Direction),
        MintTransactionHash(::prisma_client_rust::Direction),
        MintBlockNumber(::prisma_client_rust::Direction),
        IndexerVersion(::prisma_client_rust::Direction),
        IndexedAtBlockNumber(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Address(direction) => (
                    address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TokenId(direction) => (
                    token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::PaddedTokenId(direction) => (
                    padded_token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Owner(direction) => (
                    owner::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::MintAddress(direction) => (
                    mint_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::MintTimestamp(direction) => (
                    mint_timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::MintTransactionHash(direction) => (
                    mint_transaction_hash::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::MintBlockNumber(direction) => (
                    mint_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexerVersion(direction) => (
                    indexer_version::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexedAtBlockNumber(direction) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        AddressTokenIdEquals(String, String),
        Id(_prisma::read_filters::StringFilter),
        Address(_prisma::read_filters::StringFilter),
        TokenId(_prisma::read_filters::StringFilter),
        PaddedTokenId(_prisma::read_filters::StringFilter),
        Owner(_prisma::read_filters::StringFilter),
        MintAddress(_prisma::read_filters::StringNullableFilter),
        MintTimestamp(_prisma::read_filters::IntNullableFilter),
        MintTransactionHash(_prisma::read_filters::StringNullableFilter),
        MintBlockNumber(_prisma::read_filters::IntNullableFilter),
        IndexerVersion(_prisma::read_filters::StringNullableFilter),
        IndexedAtBlockNumber(_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::AddressTokenIdEquals(address, token_id) => (
                    "address_token_id",
                    ::prisma_client_rust::SerializedWhereValue::Object(vec![
                        (
                            address::NAME.to_string(),
                            ::prisma_client_rust::PrismaValue::String(address),
                        ),
                        (
                            token_id::NAME.to_string(),
                            ::prisma_client_rust::PrismaValue::String(token_id),
                        ),
                    ]),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Address(value) => (address::NAME, value.into()),
                Self::TokenId(value) => (token_id::NAME, value.into()),
                Self::PaddedTokenId(value) => (padded_token_id::NAME, value.into()),
                Self::Owner(value) => (owner::NAME, value.into()),
                Self::MintAddress(value) => (mint_address::NAME, value.into()),
                Self::MintTimestamp(value) => (mint_timestamp::NAME, value.into()),
                Self::MintTransactionHash(value) => (mint_transaction_hash::NAME, value.into()),
                Self::MintBlockNumber(value) => (mint_block_number::NAME, value.into()),
                Self::IndexerVersion(value) => (indexer_version::NAME, value.into()),
                Self::IndexedAtBlockNumber(value) => (indexed_at_block_number::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        AddressTokenIdEquals(String, String),
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::AddressTokenIdEquals(address, token_id) => {
                    Self::AddressTokenIdEquals(address, token_id)
                }
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::StringFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(address::NAME),
                ::prisma_client_rust::sel(token_id::NAME),
                ::prisma_client_rust::sel(padded_token_id::NAME),
                ::prisma_client_rust::sel(owner::NAME),
                ::prisma_client_rust::sel(mint_address::NAME),
                ::prisma_client_rust::sel(mint_timestamp::NAME),
                ::prisma_client_rust::sel(mint_transaction_hash::NAME),
                ::prisma_client_rust::sel(mint_block_number::NAME),
                ::prisma_client_rust::sel(indexer_version::NAME),
                ::prisma_client_rust::sel(indexed_at_block_number::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            address: String,
            token_id: String,
            padded_token_id: String,
            owner: String,
            indexed_at_block_number: i32,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                address::set(address),
                token_id::set(token_id),
                padded_token_id::set(padded_token_id),
                owner::set(owner),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            address: String,
            token_id: String,
            padded_token_id: String,
            owner: String,
            indexed_at_block_number: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                address::set(address),
                token_id::set(token_id),
                padded_token_id::set(padded_token_id),
                owner::set(owner),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (address, token_id, padded_token_id, owner, indexed_at_block_number, mut _params): (
                String,
                String,
                String,
                String,
                i32,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                address::set(address),
                token_id::set(token_id),
                padded_token_id::set(padded_token_id),
                owner::set(owner),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod event {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Event";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Id, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod event_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "event_id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetEventId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::EventId(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::EventId(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::EventIdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            EventId,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::EventId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::EventId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod timestamp {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "timestamp";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTimestamp(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Timestamp(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Timestamp(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::Timestamp(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            Timestamp,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementTimestamp(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementTimestamp(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyTimestamp(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideTimestamp(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Timestamp(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Timestamp(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod from_address {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "from_address";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetFromAddress(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::FromAddress(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::FromAddress(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::FromAddress(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            FromAddress,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::FromAddress(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::FromAddress(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod to_address {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "to_address";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetToAddress(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ToAddress(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ToAddress(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::ToAddress(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            ToAddress,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ToAddress(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ToAddress(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod contract_address {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "contract_address";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetContractAddress(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ContractAddress(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ContractAddress(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::ContractAddress(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            ContractAddress,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ContractAddress(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ContractAddress(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod transaction_hash {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "transaction_hash";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTransactionHash(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TransactionHash(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TransactionHash(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::TransactionHash(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            TransactionHash,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TransactionHash(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TransactionHash(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod token_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "token_id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetTokenId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::TokenId(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::TokenId(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::TokenId(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            TokenId,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::TokenId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::TokenId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod padded_token_id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "padded_token_id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetPaddedTokenId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::PaddedTokenId(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::PaddedTokenId(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::PaddedTokenId(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            PaddedTokenId,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::PaddedTokenId(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::PaddedTokenId(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod block_number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "block_number";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetBlockNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::BlockNumber(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::BlockNumber(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::BlockNumber(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            BlockNumber,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementBlockNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementBlockNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyBlockNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideBlockNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::BlockNumber(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::BlockNumber(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod contract_type {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "contract_type";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetContractType(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ContractType(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ContractType(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::ContractType(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            ContractType,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ContractType(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ContractType(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod event_type {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "event_type";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetEventType(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::EventType(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::EventType(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::EventType(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            EventType,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::EventType(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::EventType(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexer_version {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexer_version";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexerVersion(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexerVersion(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexerVersion(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::IndexerVersion(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            IndexerVersion,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexerVersion(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexerVersion(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexed_at_block_number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexed_at_block_number";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexedAtBlockNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexedAtBlockNumber(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexedAtBlockNumber(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::IndexedAtBlockNumber(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            IndexedAtBlockNumber,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementIndexedAtBlockNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementIndexedAtBlockNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyIndexedAtBlockNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideIndexedAtBlockNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexedAtBlockNumber(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexedAtBlockNumber(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create(
        event_id: String,
        timestamp: i32,
        from_address: String,
        to_address: String,
        contract_address: String,
        transaction_hash: String,
        token_id: String,
        padded_token_id: String,
        block_number: i32,
        contract_type: String,
        event_type: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (
        String,
        i32,
        String,
        String,
        String,
        String,
        String,
        String,
        i32,
        String,
        String,
        i32,
        Vec<SetParam>,
    ) {
        (
            event_id,
            timestamp,
            from_address,
            to_address,
            contract_address,
            transaction_hash,
            token_id,
            padded_token_id,
            block_number,
            contract_type,
            event_type,
            indexed_at_block_number,
            _params,
        )
    }
    pub fn create_unchecked(
        event_id: String,
        timestamp: i32,
        from_address: String,
        to_address: String,
        contract_address: String,
        transaction_hash: String,
        token_id: String,
        padded_token_id: String,
        block_number: i32,
        contract_type: String,
        event_type: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (
        String,
        i32,
        String,
        String,
        String,
        String,
        String,
        String,
        i32,
        String,
        String,
        i32,
        Vec<SetParam>,
    ) {
        (
            event_id,
            timestamp,
            from_address,
            to_address,
            contract_address,
            transaction_hash,
            token_id,
            padded_token_id,
            block_number,
            contract_type,
            event_type,
            indexed_at_block_number,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_event { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: event :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: event :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: event :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: event :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: event :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: event :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , event_id , timestamp , from_address , to_address , contract_address , transaction_hash , token_id , padded_token_id , block_number , contract_type , event_type , indexer_version , indexed_at_block_number } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: event :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: event :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: event :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: event :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "event_id" , "timestamp" , "from_address" , "to_address" , "contract_address" , "transaction_hash" , "token_id" , "padded_token_id" , "block_number" , "contract_type" , "event_type" , "indexer_version" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: event :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { String } ; (@ field_type ; event_id) => { String } ; (@ field_type ; timestamp) => { i32 } ; (@ field_type ; from_address) => { String } ; (@ field_type ; to_address) => { String } ; (@ field_type ; contract_address) => { String } ; (@ field_type ; transaction_hash) => { String } ; (@ field_type ; token_id) => { String } ; (@ field_type ; padded_token_id) => { String } ; (@ field_type ; block_number) => { i32 } ; (@ field_type ; contract_type) => { String } ; (@ field_type ; event_type) => { String } ; (@ field_type ; indexer_version) => { Option < String > } ; (@ field_type ; indexed_at_block_number) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Event" , available relations are "id, event_id, timestamp, from_address, to_address, contract_address, transaction_hash, token_id, padded_token_id, block_number, contract_type, event_type, indexer_version, indexed_at_block_number")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: id :: Select) } ; (@ selection_field_to_selection_param ; event_id) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: event_id :: Select) } ; (@ selection_field_to_selection_param ; timestamp) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: timestamp :: Select) } ; (@ selection_field_to_selection_param ; from_address) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: from_address :: Select) } ; (@ selection_field_to_selection_param ; to_address) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: to_address :: Select) } ; (@ selection_field_to_selection_param ; contract_address) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: contract_address :: Select) } ; (@ selection_field_to_selection_param ; transaction_hash) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: transaction_hash :: Select) } ; (@ selection_field_to_selection_param ; token_id) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: token_id :: Select) } ; (@ selection_field_to_selection_param ; padded_token_id) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: padded_token_id :: Select) } ; (@ selection_field_to_selection_param ; block_number) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: block_number :: Select) } ; (@ selection_field_to_selection_param ; contract_type) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: contract_type :: Select) } ; (@ selection_field_to_selection_param ; event_type) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: event_type :: Select) } ; (@ selection_field_to_selection_param ; indexer_version) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: indexer_version :: Select) } ; (@ selection_field_to_selection_param ; indexed_at_block_number) => { Into :: < crate :: prisma :: event :: SelectParam > :: into (crate :: prisma :: event :: indexed_at_block_number :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: event :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; event_id) => { "event_id" } ; (@ field_serde_name ; timestamp) => { "timestamp" } ; (@ field_serde_name ; from_address) => { "from_address" } ; (@ field_serde_name ; to_address) => { "to_address" } ; (@ field_serde_name ; contract_address) => { "contract_address" } ; (@ field_serde_name ; transaction_hash) => { "transaction_hash" } ; (@ field_serde_name ; token_id) => { "token_id" } ; (@ field_serde_name ; padded_token_id) => { "padded_token_id" } ; (@ field_serde_name ; block_number) => { "block_number" } ; (@ field_serde_name ; contract_type) => { "contract_type" } ; (@ field_serde_name ; event_type) => { "event_type" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _select_event as select;
    pub enum SelectParam {
        Id(id::Select),
        EventId(event_id::Select),
        Timestamp(timestamp::Select),
        FromAddress(from_address::Select),
        ToAddress(to_address::Select),
        ContractAddress(contract_address::Select),
        TransactionHash(transaction_hash::Select),
        TokenId(token_id::Select),
        PaddedTokenId(padded_token_id::Select),
        BlockNumber(block_number::Select),
        ContractType(contract_type::Select),
        EventType(event_type::Select),
        IndexerVersion(indexer_version::Select),
        IndexedAtBlockNumber(indexed_at_block_number::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::EventId(data) => data.to_selection(),
                Self::Timestamp(data) => data.to_selection(),
                Self::FromAddress(data) => data.to_selection(),
                Self::ToAddress(data) => data.to_selection(),
                Self::ContractAddress(data) => data.to_selection(),
                Self::TransactionHash(data) => data.to_selection(),
                Self::TokenId(data) => data.to_selection(),
                Self::PaddedTokenId(data) => data.to_selection(),
                Self::BlockNumber(data) => data.to_selection(),
                Self::ContractType(data) => data.to_selection(),
                Self::EventType(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_event { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: event :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: event :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: event :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: event :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: event :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: event :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: event :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: event :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : String , pub event_id : String , pub timestamp : i32 , pub from_address : String , pub to_address : String , pub contract_address : String , pub transaction_hash : String , pub token_id : String , pub padded_token_id : String , pub block_number : i32 , pub contract_type : String , pub event_type : String , pub indexer_version : Option < String > , pub indexed_at_block_number : i32 , $ (pub $ field : crate :: prisma :: event :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (event_id) , stringify ! (timestamp) , stringify ! (from_address) , stringify ! (to_address) , stringify ! (contract_address) , stringify ! (transaction_hash) , stringify ! (token_id) , stringify ! (padded_token_id) , stringify ! (block_number) , stringify ! (contract_type) , stringify ! (event_type) , stringify ! (indexer_version) , stringify ! (indexed_at_block_number)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: event :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: event :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: event :: event_id :: NAME , & self . event_id) ? ; state . serialize_field (crate :: prisma :: event :: timestamp :: NAME , & self . timestamp) ? ; state . serialize_field (crate :: prisma :: event :: from_address :: NAME , & self . from_address) ? ; state . serialize_field (crate :: prisma :: event :: to_address :: NAME , & self . to_address) ? ; state . serialize_field (crate :: prisma :: event :: contract_address :: NAME , & self . contract_address) ? ; state . serialize_field (crate :: prisma :: event :: transaction_hash :: NAME , & self . transaction_hash) ? ; state . serialize_field (crate :: prisma :: event :: token_id :: NAME , & self . token_id) ? ; state . serialize_field (crate :: prisma :: event :: padded_token_id :: NAME , & self . padded_token_id) ? ; state . serialize_field (crate :: prisma :: event :: block_number :: NAME , & self . block_number) ? ; state . serialize_field (crate :: prisma :: event :: contract_type :: NAME , & self . contract_type) ? ; state . serialize_field (crate :: prisma :: event :: event_type :: NAME , & self . event_type) ? ; state . serialize_field (crate :: prisma :: event :: indexer_version :: NAME , & self . indexer_version) ? ; state . serialize_field (crate :: prisma :: event :: indexed_at_block_number :: NAME , & self . indexed_at_block_number) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , event_id , timestamp , from_address , to_address , contract_address , transaction_hash , token_id , padded_token_id , block_number , contract_type , event_type , indexer_version , indexed_at_block_number } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: event :: $ field :: NAME) , + , crate :: prisma :: event :: id :: NAME , crate :: prisma :: event :: event_id :: NAME , crate :: prisma :: event :: timestamp :: NAME , crate :: prisma :: event :: from_address :: NAME , crate :: prisma :: event :: to_address :: NAME , crate :: prisma :: event :: contract_address :: NAME , crate :: prisma :: event :: transaction_hash :: NAME , crate :: prisma :: event :: token_id :: NAME , crate :: prisma :: event :: padded_token_id :: NAME , crate :: prisma :: event :: block_number :: NAME , crate :: prisma :: event :: contract_type :: NAME , crate :: prisma :: event :: event_type :: NAME , crate :: prisma :: event :: indexer_version :: NAME , crate :: prisma :: event :: indexed_at_block_number :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: event :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: event :: id :: NAME => Ok (Field :: id) , crate :: prisma :: event :: event_id :: NAME => Ok (Field :: event_id) , crate :: prisma :: event :: timestamp :: NAME => Ok (Field :: timestamp) , crate :: prisma :: event :: from_address :: NAME => Ok (Field :: from_address) , crate :: prisma :: event :: to_address :: NAME => Ok (Field :: to_address) , crate :: prisma :: event :: contract_address :: NAME => Ok (Field :: contract_address) , crate :: prisma :: event :: transaction_hash :: NAME => Ok (Field :: transaction_hash) , crate :: prisma :: event :: token_id :: NAME => Ok (Field :: token_id) , crate :: prisma :: event :: padded_token_id :: NAME => Ok (Field :: padded_token_id) , crate :: prisma :: event :: block_number :: NAME => Ok (Field :: block_number) , crate :: prisma :: event :: contract_type :: NAME => Ok (Field :: contract_type) , crate :: prisma :: event :: event_type :: NAME => Ok (Field :: event_type) , crate :: prisma :: event :: indexer_version :: NAME => Ok (Field :: indexer_version) , crate :: prisma :: event :: indexed_at_block_number :: NAME => Ok (Field :: indexed_at_block_number) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut event_id = None ; let mut timestamp = None ; let mut from_address = None ; let mut to_address = None ; let mut contract_address = None ; let mut transaction_hash = None ; let mut token_id = None ; let mut padded_token_id = None ; let mut block_number = None ; let mut contract_type = None ; let mut event_type = None ; let mut indexer_version = None ; let mut indexed_at_block_number = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: event_id => { if event_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: event_id :: NAME)) ; } event_id = Some (map . next_value () ?) ; } Field :: timestamp => { if timestamp . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: timestamp :: NAME)) ; } timestamp = Some (map . next_value () ?) ; } Field :: from_address => { if from_address . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: from_address :: NAME)) ; } from_address = Some (map . next_value () ?) ; } Field :: to_address => { if to_address . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: to_address :: NAME)) ; } to_address = Some (map . next_value () ?) ; } Field :: contract_address => { if contract_address . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: contract_address :: NAME)) ; } contract_address = Some (map . next_value () ?) ; } Field :: transaction_hash => { if transaction_hash . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: transaction_hash :: NAME)) ; } transaction_hash = Some (map . next_value () ?) ; } Field :: token_id => { if token_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: token_id :: NAME)) ; } token_id = Some (map . next_value () ?) ; } Field :: padded_token_id => { if padded_token_id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: padded_token_id :: NAME)) ; } padded_token_id = Some (map . next_value () ?) ; } Field :: block_number => { if block_number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: block_number :: NAME)) ; } block_number = Some (map . next_value () ?) ; } Field :: contract_type => { if contract_type . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: contract_type :: NAME)) ; } contract_type = Some (map . next_value () ?) ; } Field :: event_type => { if event_type . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: event_type :: NAME)) ; } event_type = Some (map . next_value () ?) ; } Field :: indexer_version => { if indexer_version . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: indexer_version :: NAME)) ; } indexer_version = Some (map . next_value () ?) ; } Field :: indexed_at_block_number => { if indexed_at_block_number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: indexed_at_block_number :: NAME)) ; } indexed_at_block_number = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: event :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: id :: NAME)) ? ; let event_id = event_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: event_id :: NAME)) ? ; let timestamp = timestamp . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: timestamp :: NAME)) ? ; let from_address = from_address . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: from_address :: NAME)) ? ; let to_address = to_address . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: to_address :: NAME)) ? ; let contract_address = contract_address . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: contract_address :: NAME)) ? ; let transaction_hash = transaction_hash . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: transaction_hash :: NAME)) ? ; let token_id = token_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: token_id :: NAME)) ? ; let padded_token_id = padded_token_id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: padded_token_id :: NAME)) ? ; let block_number = block_number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: block_number :: NAME)) ? ; let contract_type = contract_type . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: contract_type :: NAME)) ? ; let event_type = event_type . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: event_type :: NAME)) ? ; let indexer_version = indexer_version . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: indexer_version :: NAME)) ? ; let indexed_at_block_number = indexed_at_block_number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: event :: indexed_at_block_number :: NAME)) ? ; Ok (Data { id , event_id , timestamp , from_address , to_address , contract_address , transaction_hash , token_id , padded_token_id , block_number , contract_type , event_type , indexer_version , indexed_at_block_number , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "event_id" , "timestamp" , "from_address" , "to_address" , "contract_address" , "transaction_hash" , "token_id" , "padded_token_id" , "block_number" , "contract_type" , "event_type" , "indexer_version" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: event :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Event" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: event :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; event_id) => { "event_id" } ; (@ field_serde_name ; timestamp) => { "timestamp" } ; (@ field_serde_name ; from_address) => { "from_address" } ; (@ field_serde_name ; to_address) => { "to_address" } ; (@ field_serde_name ; contract_address) => { "contract_address" } ; (@ field_serde_name ; transaction_hash) => { "transaction_hash" } ; (@ field_serde_name ; token_id) => { "token_id" } ; (@ field_serde_name ; padded_token_id) => { "padded_token_id" } ; (@ field_serde_name ; block_number) => { "block_number" } ; (@ field_serde_name ; contract_type) => { "contract_type" } ; (@ field_serde_name ; event_type) => { "event_type" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _include_event as include;
    pub enum IncludeParam {
        Id(id::Include),
        EventId(event_id::Include),
        Timestamp(timestamp::Include),
        FromAddress(from_address::Include),
        ToAddress(to_address::Include),
        ContractAddress(contract_address::Include),
        TransactionHash(transaction_hash::Include),
        TokenId(token_id::Include),
        PaddedTokenId(padded_token_id::Include),
        BlockNumber(block_number::Include),
        ContractType(contract_type::Include),
        EventType(event_type::Include),
        IndexerVersion(indexer_version::Include),
        IndexedAtBlockNumber(indexed_at_block_number::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::EventId(data) => data.to_selection(),
                Self::Timestamp(data) => data.to_selection(),
                Self::FromAddress(data) => data.to_selection(),
                Self::ToAddress(data) => data.to_selection(),
                Self::ContractAddress(data) => data.to_selection(),
                Self::TransactionHash(data) => data.to_selection(),
                Self::TokenId(data) => data.to_selection(),
                Self::PaddedTokenId(data) => data.to_selection(),
                Self::BlockNumber(data) => data.to_selection(),
                Self::ContractType(data) => data.to_selection(),
                Self::EventType(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_event { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: event struct $ struct_name { # [serde (rename = "id")] pub id : String , # [serde (rename = "event_id")] pub event_id : String , # [serde (rename = "timestamp")] pub timestamp : i32 , # [serde (rename = "from_address")] pub from_address : String , # [serde (rename = "to_address")] pub to_address : String , # [serde (rename = "contract_address")] pub contract_address : String , # [serde (rename = "transaction_hash")] pub transaction_hash : String , # [serde (rename = "token_id")] pub token_id : String , # [serde (rename = "padded_token_id")] pub padded_token_id : String , # [serde (rename = "block_number")] pub block_number : i32 , # [serde (rename = "contract_type")] pub contract_type : String , # [serde (rename = "event_type")] pub event_type : String , # [serde (rename = "indexer_version")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub indexer_version : Option < String > , # [serde (rename = "indexed_at_block_number")] pub indexed_at_block_number : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_event as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "event_id")]
        pub event_id: String,
        #[serde(rename = "timestamp")]
        pub timestamp: i32,
        #[serde(rename = "from_address")]
        pub from_address: String,
        #[serde(rename = "to_address")]
        pub to_address: String,
        #[serde(rename = "contract_address")]
        pub contract_address: String,
        #[serde(rename = "transaction_hash")]
        pub transaction_hash: String,
        #[serde(rename = "token_id")]
        pub token_id: String,
        #[serde(rename = "padded_token_id")]
        pub padded_token_id: String,
        #[serde(rename = "block_number")]
        pub block_number: i32,
        #[serde(rename = "contract_type")]
        pub contract_type: String,
        #[serde(rename = "event_type")]
        pub event_type: String,
        #[serde(rename = "indexer_version")]
        pub indexer_version: Option<String>,
        #[serde(rename = "indexed_at_block_number")]
        pub indexed_at_block_number: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        SetEventId(String),
        SetTimestamp(i32),
        IncrementTimestamp(i32),
        DecrementTimestamp(i32),
        MultiplyTimestamp(i32),
        DivideTimestamp(i32),
        SetFromAddress(String),
        SetToAddress(String),
        SetContractAddress(String),
        SetTransactionHash(String),
        SetTokenId(String),
        SetPaddedTokenId(String),
        SetBlockNumber(i32),
        IncrementBlockNumber(i32),
        DecrementBlockNumber(i32),
        MultiplyBlockNumber(i32),
        DivideBlockNumber(i32),
        SetContractType(String),
        SetEventType(String),
        SetIndexerVersion(Option<String>),
        SetIndexedAtBlockNumber(i32),
        IncrementIndexedAtBlockNumber(i32),
        DecrementIndexedAtBlockNumber(i32),
        MultiplyIndexedAtBlockNumber(i32),
        DivideIndexedAtBlockNumber(i32),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetEventId(value) => (
                    event_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTimestamp(value) => (
                    timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementTimestamp(value) => (
                    timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementTimestamp(value) => (
                    timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyTimestamp(value) => (
                    timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideTimestamp(value) => (
                    timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetFromAddress(value) => (
                    from_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetToAddress(value) => (
                    to_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetContractAddress(value) => (
                    contract_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTransactionHash(value) => (
                    transaction_hash::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetTokenId(value) => (
                    token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetPaddedTokenId(value) => (
                    padded_token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetBlockNumber(value) => (
                    block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementBlockNumber(value) => (
                    block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementBlockNumber(value) => (
                    block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyBlockNumber(value) => (
                    block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideBlockNumber(value) => (
                    block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetContractType(value) => (
                    contract_type::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetEventType(value) => (
                    event_type::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetIndexerVersion(value) => (
                    indexer_version::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(String),
        EventId(String),
        Timestamp(i32),
        FromAddress(String),
        ToAddress(String),
        ContractAddress(String),
        TransactionHash(String),
        TokenId(String),
        PaddedTokenId(String),
        BlockNumber(i32),
        ContractType(String),
        EventType(String),
        IndexerVersion(Option<String>),
        IndexedAtBlockNumber(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::EventId(value) => Self::SetEventId(value),
                UncheckedSetParam::Timestamp(value) => Self::SetTimestamp(value),
                UncheckedSetParam::FromAddress(value) => Self::SetFromAddress(value),
                UncheckedSetParam::ToAddress(value) => Self::SetToAddress(value),
                UncheckedSetParam::ContractAddress(value) => Self::SetContractAddress(value),
                UncheckedSetParam::TransactionHash(value) => Self::SetTransactionHash(value),
                UncheckedSetParam::TokenId(value) => Self::SetTokenId(value),
                UncheckedSetParam::PaddedTokenId(value) => Self::SetPaddedTokenId(value),
                UncheckedSetParam::BlockNumber(value) => Self::SetBlockNumber(value),
                UncheckedSetParam::ContractType(value) => Self::SetContractType(value),
                UncheckedSetParam::EventType(value) => Self::SetEventType(value),
                UncheckedSetParam::IndexerVersion(value) => Self::SetIndexerVersion(value),
                UncheckedSetParam::IndexedAtBlockNumber(value) => {
                    Self::SetIndexedAtBlockNumber(value)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        EventId(::prisma_client_rust::Direction),
        Timestamp(::prisma_client_rust::Direction),
        FromAddress(::prisma_client_rust::Direction),
        ToAddress(::prisma_client_rust::Direction),
        ContractAddress(::prisma_client_rust::Direction),
        TransactionHash(::prisma_client_rust::Direction),
        TokenId(::prisma_client_rust::Direction),
        PaddedTokenId(::prisma_client_rust::Direction),
        BlockNumber(::prisma_client_rust::Direction),
        ContractType(::prisma_client_rust::Direction),
        EventType(::prisma_client_rust::Direction),
        IndexerVersion(::prisma_client_rust::Direction),
        IndexedAtBlockNumber(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::EventId(direction) => (
                    event_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Timestamp(direction) => (
                    timestamp::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::FromAddress(direction) => (
                    from_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ToAddress(direction) => (
                    to_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ContractAddress(direction) => (
                    contract_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TransactionHash(direction) => (
                    transaction_hash::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::TokenId(direction) => (
                    token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::PaddedTokenId(direction) => (
                    padded_token_id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::BlockNumber(direction) => (
                    block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ContractType(direction) => (
                    contract_type::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::EventType(direction) => (
                    event_type::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexerVersion(direction) => (
                    indexer_version::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexedAtBlockNumber(direction) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::StringFilter),
        EventId(_prisma::read_filters::StringFilter),
        Timestamp(_prisma::read_filters::IntFilter),
        FromAddress(_prisma::read_filters::StringFilter),
        ToAddress(_prisma::read_filters::StringFilter),
        ContractAddress(_prisma::read_filters::StringFilter),
        TransactionHash(_prisma::read_filters::StringFilter),
        TokenId(_prisma::read_filters::StringFilter),
        PaddedTokenId(_prisma::read_filters::StringFilter),
        BlockNumber(_prisma::read_filters::IntFilter),
        ContractType(_prisma::read_filters::StringFilter),
        EventType(_prisma::read_filters::StringFilter),
        IndexerVersion(_prisma::read_filters::StringNullableFilter),
        IndexedAtBlockNumber(_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::EventId(value) => (event_id::NAME, value.into()),
                Self::Timestamp(value) => (timestamp::NAME, value.into()),
                Self::FromAddress(value) => (from_address::NAME, value.into()),
                Self::ToAddress(value) => (to_address::NAME, value.into()),
                Self::ContractAddress(value) => (contract_address::NAME, value.into()),
                Self::TransactionHash(value) => (transaction_hash::NAME, value.into()),
                Self::TokenId(value) => (token_id::NAME, value.into()),
                Self::PaddedTokenId(value) => (padded_token_id::NAME, value.into()),
                Self::BlockNumber(value) => (block_number::NAME, value.into()),
                Self::ContractType(value) => (contract_type::NAME, value.into()),
                Self::EventType(value) => (event_type::NAME, value.into()),
                Self::IndexerVersion(value) => (indexer_version::NAME, value.into()),
                Self::IndexedAtBlockNumber(value) => (indexed_at_block_number::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        EventIdEquals(String),
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::EventIdEquals(value) => {
                    Self::EventId(_prisma::read_filters::StringFilter::Equals(value))
                }
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::StringFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(event_id::NAME),
                ::prisma_client_rust::sel(timestamp::NAME),
                ::prisma_client_rust::sel(from_address::NAME),
                ::prisma_client_rust::sel(to_address::NAME),
                ::prisma_client_rust::sel(contract_address::NAME),
                ::prisma_client_rust::sel(transaction_hash::NAME),
                ::prisma_client_rust::sel(token_id::NAME),
                ::prisma_client_rust::sel(padded_token_id::NAME),
                ::prisma_client_rust::sel(block_number::NAME),
                ::prisma_client_rust::sel(contract_type::NAME),
                ::prisma_client_rust::sel(event_type::NAME),
                ::prisma_client_rust::sel(indexer_version::NAME),
                ::prisma_client_rust::sel(indexed_at_block_number::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            event_id: String,
            timestamp: i32,
            from_address: String,
            to_address: String,
            contract_address: String,
            transaction_hash: String,
            token_id: String,
            padded_token_id: String,
            block_number: i32,
            contract_type: String,
            event_type: String,
            indexed_at_block_number: i32,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                event_id::set(event_id),
                timestamp::set(timestamp),
                from_address::set(from_address),
                to_address::set(to_address),
                contract_address::set(contract_address),
                transaction_hash::set(transaction_hash),
                token_id::set(token_id),
                padded_token_id::set(padded_token_id),
                block_number::set(block_number),
                contract_type::set(contract_type),
                event_type::set(event_type),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            event_id: String,
            timestamp: i32,
            from_address: String,
            to_address: String,
            contract_address: String,
            transaction_hash: String,
            token_id: String,
            padded_token_id: String,
            block_number: i32,
            contract_type: String,
            event_type: String,
            indexed_at_block_number: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                event_id::set(event_id),
                timestamp::set(timestamp),
                from_address::set(from_address),
                to_address::set(to_address),
                contract_address::set(contract_address),
                transaction_hash::set(transaction_hash),
                token_id::set(token_id),
                padded_token_id::set(padded_token_id),
                block_number::set(block_number),
                contract_type::set(contract_type),
                event_type::set(event_type),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (
                event_id,
                timestamp,
                from_address,
                to_address,
                contract_address,
                transaction_hash,
                token_id,
                padded_token_id,
                block_number,
                contract_type,
                event_type,
                indexed_at_block_number,
                mut _params,
            ): (
                String,
                i32,
                String,
                String,
                String,
                String,
                String,
                String,
                i32,
                String,
                String,
                i32,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                event_id::set(event_id),
                timestamp::set(timestamp),
                from_address::set(from_address),
                to_address::set(to_address),
                contract_address::set(contract_address),
                transaction_hash::set(transaction_hash),
                token_id::set(token_id),
                padded_token_id::set(padded_token_id),
                block_number::set(block_number),
                contract_type::set(contract_type),
                event_type::set(event_type),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod collection {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Collection";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Id, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod contract_address {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "contract_address";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetContractAddress(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::ContractAddress(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::ContractAddress(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::ContractAddressEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            ContractAddress,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::ContractAddress(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::ContractAddress(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod r#type {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "type";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetType(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Type(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Type(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Type(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Type, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Type(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Type(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexer_version {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexer_version";
        pub struct Set(pub Option<String>);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexerVersion(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexerVersion(v)
            }
        }
        pub fn set<T: From<Set>>(value: Option<String>) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexerVersion(direction)
        }
        pub fn equals(value: Option<String>) -> WhereParam {
            WhereParam::IndexerVersion(_prisma::read_filters::StringNullableFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringNullableFilter,
            IndexerVersion,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: Option<String>) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexerVersion(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexerVersion(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexed_at_block_number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexed_at_block_number";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexedAtBlockNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexedAtBlockNumber(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexedAtBlockNumber(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::IndexedAtBlockNumber(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            IndexedAtBlockNumber,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementIndexedAtBlockNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementIndexedAtBlockNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyIndexedAtBlockNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideIndexedAtBlockNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexedAtBlockNumber(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexedAtBlockNumber(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create(
        contract_address: String,
        r#type: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (String, String, i32, Vec<SetParam>) {
        (contract_address, r#type, indexed_at_block_number, _params)
    }
    pub fn create_unchecked(
        contract_address: String,
        r#type: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (String, String, i32, Vec<SetParam>) {
        (contract_address, r#type, indexed_at_block_number, _params)
    }
    #[macro_export]
    macro_rules ! _select_collection { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: collection :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: collection :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: collection :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: collection :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: collection :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: collection :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , contract_address , r#type , indexer_version , indexed_at_block_number } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: collection :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: collection :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: collection :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: collection :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "contract_address" , "type" , "indexer_version" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: collection :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { String } ; (@ field_type ; contract_address) => { String } ; (@ field_type ; r#type) => { String } ; (@ field_type ; indexer_version) => { Option < String > } ; (@ field_type ; indexed_at_block_number) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Collection" , available relations are "id, contract_address, r#type, indexer_version, indexed_at_block_number")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: collection :: SelectParam > :: into (crate :: prisma :: collection :: id :: Select) } ; (@ selection_field_to_selection_param ; contract_address) => { Into :: < crate :: prisma :: collection :: SelectParam > :: into (crate :: prisma :: collection :: contract_address :: Select) } ; (@ selection_field_to_selection_param ; r#type) => { Into :: < crate :: prisma :: collection :: SelectParam > :: into (crate :: prisma :: collection :: r#type :: Select) } ; (@ selection_field_to_selection_param ; indexer_version) => { Into :: < crate :: prisma :: collection :: SelectParam > :: into (crate :: prisma :: collection :: indexer_version :: Select) } ; (@ selection_field_to_selection_param ; indexed_at_block_number) => { Into :: < crate :: prisma :: collection :: SelectParam > :: into (crate :: prisma :: collection :: indexed_at_block_number :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: collection :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; contract_address) => { "contract_address" } ; (@ field_serde_name ; r#type) => { "type" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _select_collection as select;
    pub enum SelectParam {
        Id(id::Select),
        ContractAddress(contract_address::Select),
        Type(r#type::Select),
        IndexerVersion(indexer_version::Select),
        IndexedAtBlockNumber(indexed_at_block_number::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::ContractAddress(data) => data.to_selection(),
                Self::Type(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_collection { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: collection :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: collection :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: collection :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: collection :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: collection :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: collection :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: collection :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: collection :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : String , pub contract_address : String , pub r#type : String , pub indexer_version : Option < String > , pub indexed_at_block_number : i32 , $ (pub $ field : crate :: prisma :: collection :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (contract_address) , stringify ! (r#type) , stringify ! (indexer_version) , stringify ! (indexed_at_block_number)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: collection :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: collection :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: collection :: contract_address :: NAME , & self . contract_address) ? ; state . serialize_field (crate :: prisma :: collection :: r#type :: NAME , & self . r#type) ? ; state . serialize_field (crate :: prisma :: collection :: indexer_version :: NAME , & self . indexer_version) ? ; state . serialize_field (crate :: prisma :: collection :: indexed_at_block_number :: NAME , & self . indexed_at_block_number) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , contract_address , r#type , indexer_version , indexed_at_block_number } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: collection :: $ field :: NAME) , + , crate :: prisma :: collection :: id :: NAME , crate :: prisma :: collection :: contract_address :: NAME , crate :: prisma :: collection :: r#type :: NAME , crate :: prisma :: collection :: indexer_version :: NAME , crate :: prisma :: collection :: indexed_at_block_number :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: collection :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: collection :: id :: NAME => Ok (Field :: id) , crate :: prisma :: collection :: contract_address :: NAME => Ok (Field :: contract_address) , crate :: prisma :: collection :: r#type :: NAME => Ok (Field :: r#type) , crate :: prisma :: collection :: indexer_version :: NAME => Ok (Field :: indexer_version) , crate :: prisma :: collection :: indexed_at_block_number :: NAME => Ok (Field :: indexed_at_block_number) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut contract_address = None ; let mut r#type = None ; let mut indexer_version = None ; let mut indexed_at_block_number = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: contract_address => { if contract_address . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: contract_address :: NAME)) ; } contract_address = Some (map . next_value () ?) ; } Field :: r#type => { if r#type . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: r#type :: NAME)) ; } r#type = Some (map . next_value () ?) ; } Field :: indexer_version => { if indexer_version . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: indexer_version :: NAME)) ; } indexer_version = Some (map . next_value () ?) ; } Field :: indexed_at_block_number => { if indexed_at_block_number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: indexed_at_block_number :: NAME)) ; } indexed_at_block_number = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: collection :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: id :: NAME)) ? ; let contract_address = contract_address . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: contract_address :: NAME)) ? ; let r#type = r#type . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: r#type :: NAME)) ? ; let indexer_version = indexer_version . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: indexer_version :: NAME)) ? ; let indexed_at_block_number = indexed_at_block_number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: collection :: indexed_at_block_number :: NAME)) ? ; Ok (Data { id , contract_address , r#type , indexer_version , indexed_at_block_number , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "contract_address" , "type" , "indexer_version" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: collection :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Collection" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: collection :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; contract_address) => { "contract_address" } ; (@ field_serde_name ; r#type) => { "type" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _include_collection as include;
    pub enum IncludeParam {
        Id(id::Include),
        ContractAddress(contract_address::Include),
        Type(r#type::Include),
        IndexerVersion(indexer_version::Include),
        IndexedAtBlockNumber(indexed_at_block_number::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::ContractAddress(data) => data.to_selection(),
                Self::Type(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_collection { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: collection struct $ struct_name { # [serde (rename = "id")] pub id : String , # [serde (rename = "contract_address")] pub contract_address : String , # [serde (rename = "type")] pub r#type : String , # [serde (rename = "indexer_version")] # [serde (default , with = "::prisma_client_rust::serde::double_option")] pub indexer_version : Option < String > , # [serde (rename = "indexed_at_block_number")] pub indexed_at_block_number : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_collection as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "contract_address")]
        pub contract_address: String,
        #[serde(rename = "type")]
        pub r#type: String,
        #[serde(rename = "indexer_version")]
        pub indexer_version: Option<String>,
        #[serde(rename = "indexed_at_block_number")]
        pub indexed_at_block_number: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        SetContractAddress(String),
        SetType(String),
        SetIndexerVersion(Option<String>),
        SetIndexedAtBlockNumber(i32),
        IncrementIndexedAtBlockNumber(i32),
        DecrementIndexedAtBlockNumber(i32),
        MultiplyIndexedAtBlockNumber(i32),
        DivideIndexedAtBlockNumber(i32),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetContractAddress(value) => (
                    contract_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetType(value) => (
                    r#type::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetIndexerVersion(value) => (
                    indexer_version::NAME.to_string(),
                    value
                        .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                        .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                ),
                SetParam::SetIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(String),
        ContractAddress(String),
        Type(String),
        IndexerVersion(Option<String>),
        IndexedAtBlockNumber(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::ContractAddress(value) => Self::SetContractAddress(value),
                UncheckedSetParam::Type(value) => Self::SetType(value),
                UncheckedSetParam::IndexerVersion(value) => Self::SetIndexerVersion(value),
                UncheckedSetParam::IndexedAtBlockNumber(value) => {
                    Self::SetIndexedAtBlockNumber(value)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        ContractAddress(::prisma_client_rust::Direction),
        Type(::prisma_client_rust::Direction),
        IndexerVersion(::prisma_client_rust::Direction),
        IndexedAtBlockNumber(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::ContractAddress(direction) => (
                    contract_address::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Type(direction) => (
                    r#type::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexerVersion(direction) => (
                    indexer_version::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexedAtBlockNumber(direction) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::StringFilter),
        ContractAddress(_prisma::read_filters::StringFilter),
        Type(_prisma::read_filters::StringFilter),
        IndexerVersion(_prisma::read_filters::StringNullableFilter),
        IndexedAtBlockNumber(_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::ContractAddress(value) => (contract_address::NAME, value.into()),
                Self::Type(value) => (r#type::NAME, value.into()),
                Self::IndexerVersion(value) => (indexer_version::NAME, value.into()),
                Self::IndexedAtBlockNumber(value) => (indexed_at_block_number::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        ContractAddressEquals(String),
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::ContractAddressEquals(value) => {
                    Self::ContractAddress(_prisma::read_filters::StringFilter::Equals(value))
                }
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::StringFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(contract_address::NAME),
                ::prisma_client_rust::sel(r#type::NAME),
                ::prisma_client_rust::sel(indexer_version::NAME),
                ::prisma_client_rust::sel(indexed_at_block_number::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            contract_address: String,
            r#type: String,
            indexed_at_block_number: i32,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                contract_address::set(contract_address),
                r#type::set(r#type),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            contract_address: String,
            r#type: String,
            indexed_at_block_number: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                contract_address::set(contract_address),
                r#type::set(r#type),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (contract_address, r#type, indexed_at_block_number, mut _params): (
                String,
                String,
                i32,
                Vec<SetParam>,
            ),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                contract_address::set(contract_address),
                r#type::set(r#type),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod block {
    use super::_prisma::*;
    use super::*;
    pub const NAME: &str = "Block";
    pub mod id {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "id";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetId(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Id(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Id(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: String) -> T {
            UniqueWhereParam::IdEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::StringFilter, Id, {
            fn in_vec(_: Vec<String>) -> InVec;
            fn not_in_vec(_: Vec<String>) -> NotInVec;
            fn lt(_: String) -> Lt;
            fn lte(_: String) -> Lte;
            fn gt(_: String) -> Gt;
            fn gte(_: String) -> Gte;
            fn contains(_: String) -> Contains;
            fn starts_with(_: String) -> StartsWith;
            fn ends_with(_: String) -> EndsWith;
            fn not(_: String) -> Not;
        });
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Id(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Id(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "number";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Number(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Number(direction)
        }
        pub fn equals<T: From<UniqueWhereParam>>(value: i32) -> T {
            UniqueWhereParam::NumberEquals(value).into()
        }
        ::prisma_client_rust::scalar_where_param_fns!(_prisma::read_filters::IntFilter, Number, {
            fn in_vec(_: Vec<i32>) -> InVec;
            fn not_in_vec(_: Vec<i32>) -> NotInVec;
            fn lt(_: i32) -> Lt;
            fn lte(_: i32) -> Lte;
            fn gt(_: i32) -> Gt;
            fn gte(_: i32) -> Gte;
            fn not(_: i32) -> Not;
        });
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Number(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Number(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexer_version {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexer_version";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexerVersion(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexerVersion(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexerVersion(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::IndexerVersion(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            IndexerVersion,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexerVersion(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexerVersion(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexer_identifier {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexer_identifier";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexerIdentifier(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexerIdentifier(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexerIdentifier(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::IndexerIdentifier(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            IndexerIdentifier,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexerIdentifier(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexerIdentifier(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod status {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "status";
        pub struct Set(pub String);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetStatus(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::Status(v)
            }
        }
        pub fn set<T: From<Set>>(value: String) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::Status(direction)
        }
        pub fn equals(value: String) -> WhereParam {
            WhereParam::Status(_prisma::read_filters::StringFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::StringFilter,
            Status,
            {
                fn in_vec(_: Vec<String>) -> InVec;
                fn not_in_vec(_: Vec<String>) -> NotInVec;
                fn lt(_: String) -> Lt;
                fn lte(_: String) -> Lte;
                fn gt(_: String) -> Gt;
                fn gte(_: String) -> Gte;
                fn contains(_: String) -> Contains;
                fn starts_with(_: String) -> StartsWith;
                fn ends_with(_: String) -> EndsWith;
                fn not(_: String) -> Not;
            }
        );
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::Status(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::Status(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub mod indexed_at_block_number {
        use super::super::*;
        use super::_prisma::*;
        use super::{
            OrderByParam, SetParam, UncheckedSetParam, UniqueWhereParam, WhereParam, WithParam,
        };
        pub const NAME: &str = "indexed_at_block_number";
        pub struct Set(pub i32);
        impl From<Set> for SetParam {
            fn from(Set(v): Set) -> Self {
                Self::SetIndexedAtBlockNumber(v)
            }
        }
        impl From<Set> for UncheckedSetParam {
            fn from(Set(v): Set) -> Self {
                Self::IndexedAtBlockNumber(v)
            }
        }
        pub fn set<T: From<Set>>(value: i32) -> T {
            Set(value).into()
        }
        pub fn order(direction: ::prisma_client_rust::Direction) -> OrderByParam {
            OrderByParam::IndexedAtBlockNumber(direction)
        }
        pub fn equals(value: i32) -> WhereParam {
            WhereParam::IndexedAtBlockNumber(_prisma::read_filters::IntFilter::Equals(value))
        }
        ::prisma_client_rust::scalar_where_param_fns!(
            _prisma::read_filters::IntFilter,
            IndexedAtBlockNumber,
            {
                fn in_vec(_: Vec<i32>) -> InVec;
                fn not_in_vec(_: Vec<i32>) -> NotInVec;
                fn lt(_: i32) -> Lt;
                fn lte(_: i32) -> Lte;
                fn gt(_: i32) -> Gt;
                fn gte(_: i32) -> Gte;
                fn not(_: i32) -> Not;
            }
        );
        pub fn increment(value: i32) -> SetParam {
            SetParam::IncrementIndexedAtBlockNumber(value)
        }
        pub fn decrement(value: i32) -> SetParam {
            SetParam::DecrementIndexedAtBlockNumber(value)
        }
        pub fn multiply(value: i32) -> SetParam {
            SetParam::MultiplyIndexedAtBlockNumber(value)
        }
        pub fn divide(value: i32) -> SetParam {
            SetParam::DivideIndexedAtBlockNumber(value)
        }
        pub struct Include;
        impl Into<super::IncludeParam> for Include {
            fn into(self) -> super::IncludeParam {
                super::IncludeParam::IndexedAtBlockNumber(self)
            }
        }
        impl Include {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
        pub struct Select;
        impl Into<super::SelectParam> for Select {
            fn into(self) -> super::SelectParam {
                super::SelectParam::IndexedAtBlockNumber(self)
            }
        }
        impl Select {
            pub fn to_selection(self) -> ::prisma_client_rust::Selection {
                ::prisma_client_rust::sel(NAME)
            }
        }
    }
    pub fn create(
        number: i32,
        indexer_version: String,
        indexer_identifier: String,
        status: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (i32, String, String, String, i32, Vec<SetParam>) {
        (
            number,
            indexer_version,
            indexer_identifier,
            status,
            indexed_at_block_number,
            _params,
        )
    }
    pub fn create_unchecked(
        number: i32,
        indexer_version: String,
        indexer_identifier: String,
        status: String,
        indexed_at_block_number: i32,
        _params: Vec<SetParam>,
    ) -> (i32, String, String, String, i32, Vec<SetParam>) {
        (
            number,
            indexer_version,
            indexer_identifier,
            status,
            indexed_at_block_number,
            _params,
        )
    }
    #[macro_export]
    macro_rules ! _select_block { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: block :: select ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: block :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn select ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: block :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: block :: select ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: SelectType for Selection { type Data = Data ; type ModelData = crate :: prisma :: block :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: block :: select ! (@ selections_to_params ; : select { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () ,] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { id , number , indexer_version , indexer_identifier , status , indexed_at_block_number } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { $ (pub $ field : crate :: prisma :: block :: select ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) +] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: block :: $ field :: NAME , & self . $ field) ? ;) * state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: block :: $ field :: NAME) , + ,] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: block :: $ field :: NAME => Ok (Field :: $ field)) , * , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * while let Some (key) = map . next_key () ? { match key { $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: $ field :: NAME)) ? ;) * Ok (Data { $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "number" , "indexer_version" , "indexer_identifier" , "status" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: block :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; id) => { String } ; (@ field_type ; number) => { i32 } ; (@ field_type ; indexer_version) => { String } ; (@ field_type ; indexer_identifier) => { String } ; (@ field_type ; status) => { String } ; (@ field_type ; indexed_at_block_number) => { i32 } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Block" , available relations are "id, number, indexer_version, indexer_identifier, status, indexed_at_block_number")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; id) => { Into :: < crate :: prisma :: block :: SelectParam > :: into (crate :: prisma :: block :: id :: Select) } ; (@ selection_field_to_selection_param ; number) => { Into :: < crate :: prisma :: block :: SelectParam > :: into (crate :: prisma :: block :: number :: Select) } ; (@ selection_field_to_selection_param ; indexer_version) => { Into :: < crate :: prisma :: block :: SelectParam > :: into (crate :: prisma :: block :: indexer_version :: Select) } ; (@ selection_field_to_selection_param ; indexer_identifier) => { Into :: < crate :: prisma :: block :: SelectParam > :: into (crate :: prisma :: block :: indexer_identifier :: Select) } ; (@ selection_field_to_selection_param ; status) => { Into :: < crate :: prisma :: block :: SelectParam > :: into (crate :: prisma :: block :: status :: Select) } ; (@ selection_field_to_selection_param ; indexed_at_block_number) => { Into :: < crate :: prisma :: block :: SelectParam > :: into (crate :: prisma :: block :: indexed_at_block_number :: Select) } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: block :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; number) => { "number" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexer_identifier) => { "indexer_identifier" } ; (@ field_serde_name ; status) => { "status" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _select_block as select;
    pub enum SelectParam {
        Id(id::Select),
        Number(number::Select),
        IndexerVersion(indexer_version::Select),
        IndexerIdentifier(indexer_identifier::Select),
        Status(status::Select),
        IndexedAtBlockNumber(indexed_at_block_number::Select),
    }
    impl SelectParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Number(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexerIdentifier(data) => data.to_selection(),
                Self::Status(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _include_block { ($ (($ ($ func_arg : ident : $ func_arg_ty : ty) , +) =>) ? $ module_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { # [allow (warnings)] pub mod $ module_name { crate :: prisma :: block :: include ! (@ definitions ; $ module_name ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; use super :: * ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: block :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } pub fn include ($ ($ ($ func_arg : $ func_arg_ty) , +) ?) -> Selection { Selection ([crate :: prisma :: block :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: block :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } } ; ({ $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { { crate :: prisma :: block :: include ! (@ definitions ; ; $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) +) ; pub struct Selection (Vec < :: prisma_client_rust :: Selection >) ; impl :: prisma_client_rust :: IncludeType for Selection { type Data = Data ; type ModelData = crate :: prisma :: block :: Data ; fn to_selections (self) -> Vec < :: prisma_client_rust :: Selection > { self . 0 } } Selection ([crate :: prisma :: block :: include ! (@ selections_to_params ; : include { $ ($ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) + }) . into_iter () . map (| p | p . to_selection ()) . collect :: < Vec < _ >> () , < crate :: prisma :: block :: Types as :: prisma_client_rust :: ModelTypes > :: scalar_selections ()] . into_iter () . flatten () . collect :: < Vec < _ >> ()) } } ; (@ definitions ; $ ($ module_name : ident) ? ; $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) +) => { # [allow (warnings)] enum Fields { } # [allow (warnings)] impl Fields { fn selections () { $ (let _ = Fields :: $ field ;) + } } # [allow (warnings)] # [derive (std :: fmt :: Debug , Clone)] pub struct Data { pub id : String , pub number : i32 , pub indexer_version : String , pub indexer_identifier : String , pub status : String , pub indexed_at_block_number : i32 , $ (pub $ field : crate :: prisma :: block :: include ! (@ field_type ; $ field $ (: $ selection_mode { $ ($ selections) + }) ?) ,) + } impl :: serde :: Serialize for Data { fn serialize < S > (& self , serializer : S) -> Result < S :: Ok , S :: Error > where S : :: serde :: Serializer , { use :: serde :: ser :: SerializeStruct ; let mut state = serializer . serialize_struct ("Data" , [$ (stringify ! ($ field) ,) + stringify ! (id) , stringify ! (number) , stringify ! (indexer_version) , stringify ! (indexer_identifier) , stringify ! (status) , stringify ! (indexed_at_block_number)] . len ()) ? ; $ (state . serialize_field (crate :: prisma :: block :: $ field :: NAME , & self . $ field) ? ;) * state . serialize_field (crate :: prisma :: block :: id :: NAME , & self . id) ? ; state . serialize_field (crate :: prisma :: block :: number :: NAME , & self . number) ? ; state . serialize_field (crate :: prisma :: block :: indexer_version :: NAME , & self . indexer_version) ? ; state . serialize_field (crate :: prisma :: block :: indexer_identifier :: NAME , & self . indexer_identifier) ? ; state . serialize_field (crate :: prisma :: block :: status :: NAME , & self . status) ? ; state . serialize_field (crate :: prisma :: block :: indexed_at_block_number :: NAME , & self . indexed_at_block_number) ? ; state . end () } } impl < 'de > :: serde :: Deserialize < 'de > for Data { fn deserialize < D > (deserializer : D) -> Result < Self , D :: Error > where D : :: serde :: Deserializer < 'de > , { # [allow (warnings)] enum Field { $ ($ field) , + , id , number , indexer_version , indexer_identifier , status , indexed_at_block_number } impl < 'de > :: serde :: Deserialize < 'de > for Field { fn deserialize < D > (deserializer : D) -> Result < Field , D :: Error > where D : :: serde :: Deserializer < 'de > , { struct FieldVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for FieldVisitor { type Value = Field ; fn expecting (& self , formatter : & mut :: std :: fmt :: Formatter) -> :: std :: fmt :: Result { formatter . write_str (& [$ (crate :: prisma :: block :: $ field :: NAME) , + , crate :: prisma :: block :: id :: NAME , crate :: prisma :: block :: number :: NAME , crate :: prisma :: block :: indexer_version :: NAME , crate :: prisma :: block :: indexer_identifier :: NAME , crate :: prisma :: block :: status :: NAME , crate :: prisma :: block :: indexed_at_block_number :: NAME] . into_iter () . collect :: < Vec < _ >> () . join (", ")) } fn visit_str < E > (self , value : & str) -> Result < Field , E > where E : :: serde :: de :: Error , { match value { $ (crate :: prisma :: block :: $ field :: NAME => Ok (Field :: $ field)) , * , crate :: prisma :: block :: id :: NAME => Ok (Field :: id) , crate :: prisma :: block :: number :: NAME => Ok (Field :: number) , crate :: prisma :: block :: indexer_version :: NAME => Ok (Field :: indexer_version) , crate :: prisma :: block :: indexer_identifier :: NAME => Ok (Field :: indexer_identifier) , crate :: prisma :: block :: status :: NAME => Ok (Field :: status) , crate :: prisma :: block :: indexed_at_block_number :: NAME => Ok (Field :: indexed_at_block_number) , _ => Err (:: serde :: de :: Error :: unknown_field (value , FIELDS)) , } } } deserializer . deserialize_identifier (FieldVisitor) } } struct DataVisitor ; impl < 'de > :: serde :: de :: Visitor < 'de > for DataVisitor { type Value = Data ; fn expecting (& self , formatter : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { formatter . write_str ("struct Data") } fn visit_map < V > (self , mut map : V) -> Result < Data , V :: Error > where V : :: serde :: de :: MapAccess < 'de > , { $ (let mut $ field = None ;) * let mut id = None ; let mut number = None ; let mut indexer_version = None ; let mut indexer_identifier = None ; let mut status = None ; let mut indexed_at_block_number = None ; while let Some (key) = map . next_key () ? { match key { Field :: id => { if id . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: id :: NAME)) ; } id = Some (map . next_value () ?) ; } Field :: number => { if number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: number :: NAME)) ; } number = Some (map . next_value () ?) ; } Field :: indexer_version => { if indexer_version . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: indexer_version :: NAME)) ; } indexer_version = Some (map . next_value () ?) ; } Field :: indexer_identifier => { if indexer_identifier . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: indexer_identifier :: NAME)) ; } indexer_identifier = Some (map . next_value () ?) ; } Field :: status => { if status . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: status :: NAME)) ; } status = Some (map . next_value () ?) ; } Field :: indexed_at_block_number => { if indexed_at_block_number . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: indexed_at_block_number :: NAME)) ; } indexed_at_block_number = Some (map . next_value () ?) ; } $ (Field :: $ field => { if $ field . is_some () { return Err (:: serde :: de :: Error :: duplicate_field (crate :: prisma :: block :: $ field :: NAME)) ; } $ field = Some (map . next_value () ?) ; }) * } } $ (let $ field = $ field . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: $ field :: NAME)) ? ;) * let id = id . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: id :: NAME)) ? ; let number = number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: number :: NAME)) ? ; let indexer_version = indexer_version . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: indexer_version :: NAME)) ? ; let indexer_identifier = indexer_identifier . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: indexer_identifier :: NAME)) ? ; let status = status . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: status :: NAME)) ? ; let indexed_at_block_number = indexed_at_block_number . ok_or_else (|| serde :: de :: Error :: missing_field (crate :: prisma :: block :: indexed_at_block_number :: NAME)) ? ; Ok (Data { id , number , indexer_version , indexer_identifier , status , indexed_at_block_number , $ ($ field) , * }) } } const FIELDS : & 'static [& 'static str] = & ["id" , "number" , "indexer_version" , "indexer_identifier" , "status" , "indexed_at_block_number"] ; deserializer . deserialize_struct ("Data" , FIELDS , DataVisitor) } } $ ($ (pub mod $ field { crate :: prisma :: block :: $ selection_mode ! (@ field_module ; $ field : $ selection_mode { $ ($ selections) + }) ; }) ?) + } ; (@ field_type ; $ field : ident $ ($ tokens : tt) *) => { compile_error ! (stringify ! (Cannot include nonexistent relation $ field on model "Block" , available relations are "")) } ; (@ field_module ; $ ($ tokens : tt) *) => { } ; (@ selection_field_to_selection_param ; $ ($ tokens : tt) *) => { compile_error ! (stringify ! ($ ($ tokens) *)) } ; (@ selections_to_params ; : $ macro_name : ident { $ ($ field : ident $ (($ ($ filters : tt) +) $ (. $ arg : ident ($ ($ arg_params : tt) *)) *) ? $ (: $ selection_mode : ident { $ ($ selections : tt) + }) ?) + }) => { [$ (crate :: prisma :: block :: $ macro_name ! (@ selection_field_to_selection_param ; $ field $ (($ ($ filters) +) $ (. $ arg ($ ($ arg_params) *)) *) ? $ (: $ selection_mode { $ ($ selections) + }) ?) ,) +] } ; (@ filters_to_args ;) => { vec ! [] } ; (@ filters_to_args ; $ ($ t : tt) *) => { $ ($ t) * } ; (@ field_serde_name ; id) => { "id" } ; (@ field_serde_name ; number) => { "number" } ; (@ field_serde_name ; indexer_version) => { "indexer_version" } ; (@ field_serde_name ; indexer_identifier) => { "indexer_identifier" } ; (@ field_serde_name ; status) => { "status" } ; (@ field_serde_name ; indexed_at_block_number) => { "indexed_at_block_number" } ; }
    pub use _include_block as include;
    pub enum IncludeParam {
        Id(id::Include),
        Number(number::Include),
        IndexerVersion(indexer_version::Include),
        IndexerIdentifier(indexer_identifier::Include),
        Status(status::Include),
        IndexedAtBlockNumber(indexed_at_block_number::Include),
    }
    impl IncludeParam {
        pub fn to_selection(self) -> ::prisma_client_rust::Selection {
            match self {
                Self::Id(data) => data.to_selection(),
                Self::Number(data) => data.to_selection(),
                Self::IndexerVersion(data) => data.to_selection(),
                Self::IndexerIdentifier(data) => data.to_selection(),
                Self::Status(data) => data.to_selection(),
                Self::IndexedAtBlockNumber(data) => data.to_selection(),
            }
        }
    }
    #[macro_export]
    macro_rules ! _partial_unchecked_block { ($ struct_name : ident { $ ($ scalar_field : ident) + }) => { :: prisma_client_rust :: macros :: partial_unchecked ! { crate :: prisma :: block struct $ struct_name { # [serde (rename = "id")] pub id : String , # [serde (rename = "number")] pub number : i32 , # [serde (rename = "indexer_version")] pub indexer_version : String , # [serde (rename = "indexer_identifier")] pub indexer_identifier : String , # [serde (rename = "status")] pub status : String , # [serde (rename = "indexed_at_block_number")] pub indexed_at_block_number : i32 } [$ ($ scalar_field) , +] } } ; }
    pub use _partial_unchecked_block as partial_unchecked;
    #[derive(Debug, Clone, :: serde :: Serialize, :: serde :: Deserialize)]
    pub struct Data {
        #[serde(rename = "id")]
        pub id: String,
        #[serde(rename = "number")]
        pub number: i32,
        #[serde(rename = "indexer_version")]
        pub indexer_version: String,
        #[serde(rename = "indexer_identifier")]
        pub indexer_identifier: String,
        #[serde(rename = "status")]
        pub status: String,
        #[serde(rename = "indexed_at_block_number")]
        pub indexed_at_block_number: i32,
    }
    impl Data {}
    #[derive(Clone)]
    pub enum WithParam {}
    impl Into<::prisma_client_rust::Selection> for WithParam {
        fn into(self) -> ::prisma_client_rust::Selection {
            match self {}
        }
    }
    #[derive(Clone)]
    pub enum SetParam {
        SetId(String),
        SetNumber(i32),
        IncrementNumber(i32),
        DecrementNumber(i32),
        MultiplyNumber(i32),
        DivideNumber(i32),
        SetIndexerVersion(String),
        SetIndexerIdentifier(String),
        SetStatus(String),
        SetIndexedAtBlockNumber(i32),
        IncrementIndexedAtBlockNumber(i32),
        DecrementIndexedAtBlockNumber(i32),
        MultiplyIndexedAtBlockNumber(i32),
        DivideIndexedAtBlockNumber(i32),
    }
    impl From<SetParam> for (String, ::prisma_client_rust::PrismaValue) {
        fn from(param: SetParam) -> Self {
            match param {
                SetParam::SetId(value) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetNumber(value) => (
                    number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementNumber(value) => (
                    number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementNumber(value) => (
                    number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyNumber(value) => (
                    number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideNumber(value) => (
                    number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::SetIndexerVersion(value) => (
                    indexer_version::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetIndexerIdentifier(value) => (
                    indexer_identifier::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetStatus(value) => (
                    status::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(value),
                ),
                SetParam::SetIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Int(value as i64),
                ),
                SetParam::IncrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "increment".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DecrementIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "decrement".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::MultiplyIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "multiply".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
                SetParam::DivideIndexedAtBlockNumber(value) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::Object(vec![(
                        "divide".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum UncheckedSetParam {
        Id(String),
        Number(i32),
        IndexerVersion(String),
        IndexerIdentifier(String),
        Status(String),
        IndexedAtBlockNumber(i32),
    }
    impl From<UncheckedSetParam> for SetParam {
        fn from(param: UncheckedSetParam) -> Self {
            match param {
                UncheckedSetParam::Id(value) => Self::SetId(value),
                UncheckedSetParam::Number(value) => Self::SetNumber(value),
                UncheckedSetParam::IndexerVersion(value) => Self::SetIndexerVersion(value),
                UncheckedSetParam::IndexerIdentifier(value) => Self::SetIndexerIdentifier(value),
                UncheckedSetParam::Status(value) => Self::SetStatus(value),
                UncheckedSetParam::IndexedAtBlockNumber(value) => {
                    Self::SetIndexedAtBlockNumber(value)
                }
            }
        }
    }
    #[derive(Clone)]
    pub enum OrderByParam {
        Id(::prisma_client_rust::Direction),
        Number(::prisma_client_rust::Direction),
        IndexerVersion(::prisma_client_rust::Direction),
        IndexerIdentifier(::prisma_client_rust::Direction),
        Status(::prisma_client_rust::Direction),
        IndexedAtBlockNumber(::prisma_client_rust::Direction),
    }
    impl Into<(String, ::prisma_client_rust::PrismaValue)> for OrderByParam {
        fn into(self) -> (String, ::prisma_client_rust::PrismaValue) {
            match self {
                Self::Id(direction) => (
                    id::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Number(direction) => (
                    number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexerVersion(direction) => (
                    indexer_version::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexerIdentifier(direction) => (
                    indexer_identifier::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::Status(direction) => (
                    status::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
                Self::IndexedAtBlockNumber(direction) => (
                    indexed_at_block_number::NAME.to_string(),
                    ::prisma_client_rust::PrismaValue::String(direction.to_string()),
                ),
            }
        }
    }
    #[derive(Clone)]
    pub enum WhereParam {
        Not(Vec<WhereParam>),
        Or(Vec<WhereParam>),
        And(Vec<WhereParam>),
        Id(_prisma::read_filters::StringFilter),
        Number(_prisma::read_filters::IntFilter),
        IndexerVersion(_prisma::read_filters::StringFilter),
        IndexerIdentifier(_prisma::read_filters::StringFilter),
        Status(_prisma::read_filters::StringFilter),
        IndexedAtBlockNumber(_prisma::read_filters::IntFilter),
    }
    impl ::prisma_client_rust::WhereInput for WhereParam {
        fn serialize(self) -> ::prisma_client_rust::SerializedWhereInput {
            let (name, value) = match self {
                Self::Not(value) => (
                    "NOT",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Or(value) => (
                    "OR",
                    ::prisma_client_rust::SerializedWhereValue::List(
                        value
                            .into_iter()
                            .map(::prisma_client_rust::WhereInput::serialize)
                            .map(Into::into)
                            .map(|v| vec![v])
                            .map(::prisma_client_rust::PrismaValue::Object)
                            .collect(),
                    ),
                ),
                Self::And(value) => (
                    "AND",
                    ::prisma_client_rust::SerializedWhereValue::Object(
                        ::prisma_client_rust::merge_fields(
                            value
                                .into_iter()
                                .map(::prisma_client_rust::WhereInput::serialize)
                                .map(Into::into)
                                .collect(),
                        ),
                    ),
                ),
                Self::Id(value) => (id::NAME, value.into()),
                Self::Number(value) => (number::NAME, value.into()),
                Self::IndexerVersion(value) => (indexer_version::NAME, value.into()),
                Self::IndexerIdentifier(value) => (indexer_identifier::NAME, value.into()),
                Self::Status(value) => (status::NAME, value.into()),
                Self::IndexedAtBlockNumber(value) => (indexed_at_block_number::NAME, value.into()),
            };
            ::prisma_client_rust::SerializedWhereInput::new(name, value.into())
        }
    }
    #[derive(Clone)]
    pub enum UniqueWhereParam {
        NumberEquals(i32),
        IdEquals(String),
    }
    impl From<UniqueWhereParam> for WhereParam {
        fn from(value: UniqueWhereParam) -> Self {
            match value {
                UniqueWhereParam::NumberEquals(value) => {
                    Self::Number(_prisma::read_filters::IntFilter::Equals(value))
                }
                UniqueWhereParam::IdEquals(value) => {
                    Self::Id(_prisma::read_filters::StringFilter::Equals(value))
                }
            }
        }
    }
    impl From<::prisma_client_rust::Operator<Self>> for WhereParam {
        fn from(op: ::prisma_client_rust::Operator<Self>) -> Self {
            match op {
                ::prisma_client_rust::Operator::Not(value) => Self::Not(value),
                ::prisma_client_rust::Operator::And(value) => Self::And(value),
                ::prisma_client_rust::Operator::Or(value) => Self::Or(value),
            }
        }
    }
    #[derive(Clone)]
    pub struct Types;
    impl ::prisma_client_rust::ModelTypes for Types {
        type Data = Data;
        type Where = WhereParam;
        type UncheckedSet = UncheckedSetParam;
        type Set = SetParam;
        type With = WithParam;
        type OrderBy = OrderByParam;
        type Cursor = UniqueWhereParam;
        const MODEL: &'static str = NAME;
        fn scalar_selections() -> Vec<::prisma_client_rust::Selection> {
            vec![
                ::prisma_client_rust::sel(id::NAME),
                ::prisma_client_rust::sel(number::NAME),
                ::prisma_client_rust::sel(indexer_version::NAME),
                ::prisma_client_rust::sel(indexer_identifier::NAME),
                ::prisma_client_rust::sel(status::NAME),
                ::prisma_client_rust::sel(indexed_at_block_number::NAME),
            ]
        }
    }
    pub type UniqueArgs = ::prisma_client_rust::UniqueArgs<Types>;
    pub type ManyArgs = ::prisma_client_rust::ManyArgs<Types>;
    pub type Count<'a> = ::prisma_client_rust::Count<'a, Types>;
    pub type Create<'a> = ::prisma_client_rust::Create<'a, Types>;
    pub type CreateMany<'a> = ::prisma_client_rust::CreateMany<'a, Types>;
    pub type FindUnique<'a> = ::prisma_client_rust::FindUnique<'a, Types>;
    pub type FindMany<'a> = ::prisma_client_rust::FindMany<'a, Types>;
    pub type FindFirst<'a> = ::prisma_client_rust::FindFirst<'a, Types>;
    pub type Update<'a> = ::prisma_client_rust::Update<'a, Types>;
    pub type UpdateMany<'a> = ::prisma_client_rust::UpdateMany<'a, Types>;
    pub type Upsert<'a> = ::prisma_client_rust::Upsert<'a, Types>;
    pub type Delete<'a> = ::prisma_client_rust::Delete<'a, Types>;
    pub type DeleteMany<'a> = ::prisma_client_rust::DeleteMany<'a, Types>;
    #[derive(Clone)]
    pub struct Actions<'a> {
        pub client: &'a ::prisma_client_rust::PrismaClientInternals,
    }
    impl<'a> Actions<'a> {
        pub fn find_unique(self, _where: UniqueWhereParam) -> FindUnique<'a> {
            FindUnique::new(self.client, _where.into())
        }
        pub fn find_first(self, _where: Vec<WhereParam>) -> FindFirst<'a> {
            FindFirst::new(self.client, _where)
        }
        pub fn find_many(self, _where: Vec<WhereParam>) -> FindMany<'a> {
            FindMany::new(self.client, _where)
        }
        pub fn create(
            self,
            number: i32,
            indexer_version: String,
            indexer_identifier: String,
            status: String,
            indexed_at_block_number: i32,
            mut _params: Vec<SetParam>,
        ) -> Create<'a> {
            _params.extend([
                number::set(number),
                indexer_version::set(indexer_version),
                indexer_identifier::set(indexer_identifier),
                status::set(status),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params)
        }
        pub fn create_unchecked(
            self,
            number: i32,
            indexer_version: String,
            indexer_identifier: String,
            status: String,
            indexed_at_block_number: i32,
            mut _params: Vec<UncheckedSetParam>,
        ) -> Create<'a> {
            _params.extend([
                number::set(number),
                indexer_version::set(indexer_version),
                indexer_identifier::set(indexer_identifier),
                status::set(status),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Create::new(self.client, _params.into_iter().map(Into::into).collect())
        }
        pub fn update(self, _where: UniqueWhereParam, _params: Vec<SetParam>) -> Update<'a> {
            Update::new(self.client, _where.into(), _params, vec![])
        }
        pub fn update_unchecked(
            self,
            _where: UniqueWhereParam,
            _params: Vec<UncheckedSetParam>,
        ) -> Update<'a> {
            Update::new(
                self.client,
                _where.into(),
                _params.into_iter().map(Into::into).collect(),
                vec![],
            )
        }
        pub fn update_many(
            self,
            _where: Vec<WhereParam>,
            _params: Vec<SetParam>,
        ) -> UpdateMany<'a> {
            UpdateMany::new(self.client, _where, _params)
        }
        pub fn upsert(
            self,
            _where: UniqueWhereParam,
            (
                number,
                indexer_version,
                indexer_identifier,
                status,
                indexed_at_block_number,
                mut _params,
            ): (i32, String, String, String, i32, Vec<SetParam>),
            _update: Vec<SetParam>,
        ) -> Upsert<'a> {
            _params.extend([
                number::set(number),
                indexer_version::set(indexer_version),
                indexer_identifier::set(indexer_identifier),
                status::set(status),
                indexed_at_block_number::set(indexed_at_block_number),
            ]);
            Upsert::new(self.client, _where.into(), _params, _update)
        }
        pub fn delete(self, _where: UniqueWhereParam) -> Delete<'a> {
            Delete::new(self.client, _where.into(), vec![])
        }
        pub fn delete_many(self, _where: Vec<WhereParam>) -> DeleteMany<'a> {
            DeleteMany::new(self.client, _where)
        }
        pub fn count(self, _where: Vec<WhereParam>) -> Count<'a> {
            Count::new(self.client, _where)
        }
        pub fn find_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::FindRaw<'a, Types, T> {
            ::prisma_client_rust::FindRaw::new(self.client)
        }
        pub fn aggregate_raw<T: ::prisma_client_rust::Data>(
            self,
        ) -> ::prisma_client_rust::AggregateRaw<'a, Types, T> {
            ::prisma_client_rust::AggregateRaw::new(self.client)
        }
    }
}
pub mod _prisma {
    pub struct PrismaClientBuilder {
        url: Option<String>,
        action_notifier: ::prisma_client_rust::ActionNotifier,
    }
    impl PrismaClientBuilder {
        fn new() -> Self {
            Self {
                url: None,
                action_notifier: ::prisma_client_rust::ActionNotifier::new(),
            }
        }
        pub fn with_url(mut self, url: String) -> Self {
            self.url = Some(url);
            self
        }
        pub async fn build(self) -> Result<PrismaClient, ::prisma_client_rust::NewClientError> {
            let internals = ::prisma_client_rust::PrismaClientInternals::new(
                self.url,
                self.action_notifier,
                super::DATAMODEL_STR,
            )
            .await?;
            Ok(PrismaClient(internals))
        }
    }
    pub struct PrismaClient(::prisma_client_rust::PrismaClientInternals);
    impl ::std::fmt::Debug for PrismaClient {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("PrismaClient").finish()
        }
    }
    impl PrismaClient {
        pub fn _builder() -> PrismaClientBuilder {
            PrismaClientBuilder::new()
        }
        pub fn _query_raw<T: ::prisma_client_rust::Data>(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::QueryRaw<T> {
            ::prisma_client_rust::QueryRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub fn _execute_raw(
            &self,
            query: ::prisma_client_rust::Raw,
        ) -> ::prisma_client_rust::ExecuteRaw {
            ::prisma_client_rust::ExecuteRaw::new(&self.0, query, super::DATABASE_STR)
        }
        pub async fn _batch<
            'batch,
            T: ::prisma_client_rust::BatchContainer<'batch, Marker>,
            Marker,
        >(
            &self,
            queries: T,
        ) -> ::prisma_client_rust::Result<
            <T as ::prisma_client_rust::BatchContainer<'batch, Marker>>::ReturnType,
        > {
            ::prisma_client_rust::batch(queries, &self.0).await
        }
        pub fn _transaction(&self) -> ::prisma_client_rust::TransactionBuilder<Self> {
            ::prisma_client_rust::TransactionBuilder::_new(self, &self.0)
        }
        pub fn token(&self) -> super::token::Actions {
            super::token::Actions { client: &self.0 }
        }
        pub fn event(&self) -> super::event::Actions {
            super::event::Actions { client: &self.0 }
        }
        pub fn collection(&self) -> super::collection::Actions {
            super::collection::Actions { client: &self.0 }
        }
        pub fn block(&self) -> super::block::Actions {
            super::block::Actions { client: &self.0 }
        }
    }
    impl ::prisma_client_rust::PrismaClient for PrismaClient {
        fn internals(&self) -> &::prisma_client_rust::PrismaClientInternals {
            &self.0
        }
        fn internals_mut(&mut self) -> &mut ::prisma_client_rust::PrismaClientInternals {
            &mut self.0
        }
        fn with_tx_id(&self, tx_id: Option<::prisma_client_rust::query_core::TxId>) -> Self {
            Self(self.0.with_tx_id(tx_id))
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum BlockScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "number")]
        Number,
        #[serde(rename = "indexer_version")]
        IndexerVersion,
        #[serde(rename = "indexer_identifier")]
        IndexerIdentifier,
        #[serde(rename = "status")]
        Status,
        #[serde(rename = "indexed_at_block_number")]
        IndexedAtBlockNumber,
    }
    impl ToString for BlockScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Number => "number".to_string(),
                Self::IndexerVersion => "indexer_version".to_string(),
                Self::IndexerIdentifier => "indexer_identifier".to_string(),
                Self::Status => "status".to_string(),
                Self::IndexedAtBlockNumber => "indexed_at_block_number".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum CollectionScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "contract_address")]
        ContractAddress,
        #[serde(rename = "type")]
        Type,
        #[serde(rename = "indexer_version")]
        IndexerVersion,
        #[serde(rename = "indexed_at_block_number")]
        IndexedAtBlockNumber,
    }
    impl ToString for CollectionScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::ContractAddress => "contract_address".to_string(),
                Self::Type => "type".to_string(),
                Self::IndexerVersion => "indexer_version".to_string(),
                Self::IndexedAtBlockNumber => "indexed_at_block_number".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum EventScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "event_id")]
        EventId,
        #[serde(rename = "timestamp")]
        Timestamp,
        #[serde(rename = "from_address")]
        FromAddress,
        #[serde(rename = "to_address")]
        ToAddress,
        #[serde(rename = "contract_address")]
        ContractAddress,
        #[serde(rename = "transaction_hash")]
        TransactionHash,
        #[serde(rename = "token_id")]
        TokenId,
        #[serde(rename = "padded_token_id")]
        PaddedTokenId,
        #[serde(rename = "block_number")]
        BlockNumber,
        #[serde(rename = "contract_type")]
        ContractType,
        #[serde(rename = "event_type")]
        EventType,
        #[serde(rename = "indexer_version")]
        IndexerVersion,
        #[serde(rename = "indexed_at_block_number")]
        IndexedAtBlockNumber,
    }
    impl ToString for EventScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::EventId => "event_id".to_string(),
                Self::Timestamp => "timestamp".to_string(),
                Self::FromAddress => "from_address".to_string(),
                Self::ToAddress => "to_address".to_string(),
                Self::ContractAddress => "contract_address".to_string(),
                Self::TransactionHash => "transaction_hash".to_string(),
                Self::TokenId => "token_id".to_string(),
                Self::PaddedTokenId => "padded_token_id".to_string(),
                Self::BlockNumber => "block_number".to_string(),
                Self::ContractType => "contract_type".to_string(),
                Self::EventType => "event_type".to_string(),
                Self::IndexerVersion => "indexer_version".to_string(),
                Self::IndexedAtBlockNumber => "indexed_at_block_number".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum SortOrder {
        #[serde(rename = "asc")]
        Asc,
        #[serde(rename = "desc")]
        Desc,
    }
    impl ToString for SortOrder {
        fn to_string(&self) -> String {
            match self {
                Self::Asc => "asc".to_string(),
                Self::Desc => "desc".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TokenScalarFieldEnum {
        #[serde(rename = "id")]
        Id,
        #[serde(rename = "address")]
        Address,
        #[serde(rename = "token_id")]
        TokenId,
        #[serde(rename = "padded_token_id")]
        PaddedTokenId,
        #[serde(rename = "owner")]
        Owner,
        #[serde(rename = "mint_address")]
        MintAddress,
        #[serde(rename = "mint_timestamp")]
        MintTimestamp,
        #[serde(rename = "mint_transaction_hash")]
        MintTransactionHash,
        #[serde(rename = "mint_block_number")]
        MintBlockNumber,
        #[serde(rename = "indexer_version")]
        IndexerVersion,
        #[serde(rename = "indexed_at_block_number")]
        IndexedAtBlockNumber,
    }
    impl ToString for TokenScalarFieldEnum {
        fn to_string(&self) -> String {
            match self {
                Self::Id => "id".to_string(),
                Self::Address => "address".to_string(),
                Self::TokenId => "token_id".to_string(),
                Self::PaddedTokenId => "padded_token_id".to_string(),
                Self::Owner => "owner".to_string(),
                Self::MintAddress => "mint_address".to_string(),
                Self::MintTimestamp => "mint_timestamp".to_string(),
                Self::MintTransactionHash => "mint_transaction_hash".to_string(),
                Self::MintBlockNumber => "mint_block_number".to_string(),
                Self::IndexerVersion => "indexer_version".to_string(),
                Self::IndexedAtBlockNumber => "indexed_at_block_number".to_string(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, :: serde :: Serialize, :: serde :: Deserialize, PartialEq, Eq)]
    pub enum TransactionIsolationLevel {
        #[serde(rename = "Serializable")]
        Serializable,
    }
    impl ToString for TransactionIsolationLevel {
        fn to_string(&self) -> String {
            match self {
                Self::Serializable => "Serializable".to_string(),
            }
        }
    }
    impl ::prisma_client_rust::TransactionIsolationLevel for TransactionIsolationLevel {}
    pub mod read_filters {
        #[derive(Clone)]
        pub enum StringFilter {
            Equals(String),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Not(String),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "contains".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "startsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::EndsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "endsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum StringNullableFilter {
            Equals(Option<String>),
            InVec(Vec<String>),
            NotInVec(Vec<String>),
            Lt(String),
            Lte(String),
            Gt(String),
            Gte(String),
            Contains(String),
            StartsWith(String),
            EndsWith(String),
            Not(Option<String>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for StringNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            value
                                .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::String(value),
                    )]),
                    Self::Contains(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "contains".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::StartsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "startsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::EndsWith(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "endsWith".to_string(),
                            ::prisma_client_rust::PrismaValue::String(value),
                        )])
                    }
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::String(value))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum IntFilter {
            Equals(i32),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(i32),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            ::prisma_client_rust::PrismaValue::Int(value as i64),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                }
            }
        }
        #[derive(Clone)]
        pub enum IntNullableFilter {
            Equals(Option<i32>),
            InVec(Vec<i32>),
            NotInVec(Vec<i32>),
            Lt(i32),
            Lte(i32),
            Gt(i32),
            Gte(i32),
            Not(Option<i32>),
        }
        impl Into<::prisma_client_rust::SerializedWhereValue> for IntNullableFilter {
            fn into(self) -> ::prisma_client_rust::SerializedWhereValue {
                match self {
                    Self::Equals(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "equals".to_string(),
                            value
                                .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                                .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                        )])
                    }
                    Self::InVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "in".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::NotInVec(value) => {
                        ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                            "notIn".to_string(),
                            ::prisma_client_rust::PrismaValue::List(
                                value
                                    .into_iter()
                                    .map(|value| {
                                        ::prisma_client_rust::PrismaValue::Int(value as i64)
                                    })
                                    .collect(),
                            ),
                        )])
                    }
                    Self::Lt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Lte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "lte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gt(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gt".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Gte(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "gte".to_string(),
                        ::prisma_client_rust::PrismaValue::Int(value as i64),
                    )]),
                    Self::Not(value) => ::prisma_client_rust::SerializedWhereValue::Object(vec![(
                        "not".to_string(),
                        value
                            .map(|value| ::prisma_client_rust::PrismaValue::Int(value as i64))
                            .unwrap_or_else(|| ::prisma_client_rust::PrismaValue::Null),
                    )]),
                }
            }
        }
    }
}
pub use _prisma::*;
